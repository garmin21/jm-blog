import{_ as t,c as o,a as l,o as r}from"./app-mFxSxjJK.js";const p={};function i(n,e){return r(),o("div",null,e[0]||(e[0]=[l('<p>上篇： <a href="https://juejin.cn/post/7053998924071174175" title="https://juejin.cn/post/7053998924071174175" target="_blank" rel="noopener noreferrer">webpack 打包产物解析及原理（含 cjs/esm/代码分离/懒加载）</a></p><h2 id="rollup-定位" tabindex="-1"><a class="header-anchor" href="#rollup-定位"><span>rollup 定位</span></a></h2><p>rollup 比 webpack 晚出 2 年，对比 webpack 肯定是有差异化的</p><p>我们可以查看官网<a href="https://link.juejin.cn?target=https%3A%2F%2Frollupjs.org%2Fguide%2Fen%2F%23overview" title="https://rollupjs.org/guide/en/#overview" target="_blank" rel="noopener noreferrer">rollupjs.org/guide/en/#o…</a></p><p>得到以下几个特点</p><ol><li>建议开发者使用 esm 写模块。 <ol><li>使用 esm 模块的好处就很多了：（可以参考我另一篇：<a href="https://juejin.cn/post/6959360326299025445" title="https://juejin.cn/post/6959360326299025445" target="_blank" rel="noopener noreferrer">juejin.cn/post/695936…</a> ） <ol><li>高版本浏览器原生支持（浏览器只有 2 种方法支持引入 js 模块，1 是 script 标签，2 就是 esm 模块）</li><li>可以做 tree shaking（早期 webpack 版本是不支持 tree shaking 的）</li><li>可以解决循环引用的问题</li></ol></li></ol></li><li>esm 最终将在任何地方都可以实现（浏览器+node 都可以用，是未来的标准），但 Rollup 让您今天就可以实现。 <ul><li>这句话很重要，也是 rollup 的特点，也是诞生的原因</li><li>里面有历史原因（详细可以参考我的上篇关于 webpack 的）</li><li><strong>简单的说就是：ESM - ECMAScript 模块是未来的官方标准和主流。但是浏览器的版本需要比较高，比如 chorme 都需要 63 版本以上</strong><ul><li>所以 rollup 主要的出发点是：<strong>未来还没到，但 rollup 可以让你先写未来的代码（指 esm）</strong></li></ul></li></ul></li></ol><h2 id="rollup-使用流程" tabindex="-1"><a class="header-anchor" href="#rollup-使用流程"><span>rollup 使用流程</span></a></h2><p>浏览器环境使用的应用程序的话：</p><ol><li>无需考虑浏览器兼容问题的话 <ul><li>开发者写 esm 代码 -&gt; rollup 通过<strong>入口</strong>，递归识别 esm 模块 -&gt; 最终打包成一个或多个 bundle.js -&gt; 浏览器直接可以支持引入<code>&lt;script type=&quot;module&quot;&gt;</code></li></ul></li><li>需考虑浏览器兼容问题的话 <ul><li>可能会比较复杂，需要用额外的 polyfill 库，或结合 webpack 使用</li></ul></li></ol><p>打包成 npm 包的话：</p><ul><li>开发者写 esm 代码 -&gt; rollup 通过<strong>入口</strong>，递归识别 esm 模块 -&gt; （可以支持配置输出多种格式的模块，如 esm、cjs、umd、amd）最终打包成一个或多个 bundle.js <ul><li>（开发者要写 cjs 也可以，需要插件@rollup/plugin-commonjs） 初步看来</li></ul></li><li>很明显，rollup 比较适合打包 js 库（react、vue 等的源代码库都是 rollup 打包的）或 高版本无需往下兼容的浏览器应用程序（现在 2022 年了，时间越往后，迁移到 rollup 会越多，猜测）</li><li>这样打包出来的库，可以充分使用上 esm 的 tree shaking，使源库体积最小</li></ul><h3 id="举个小-🌰-简单的对比一下-webpack-打包和-rollup-打包" tabindex="-1"><a class="header-anchor" href="#举个小-🌰-简单的对比一下-webpack-打包和-rollup-打包"><span>举个小 🌰 简单的对比一下 webpack 打包和 rollup 打包</span></a></h3><p>此 demo 是纯 esm 的写法</p><p>js</p><p>代码解读</p><p>复制代码</p><p><code>// 入口main。js import { b } from &#39;./test/a&#39; console.log(b + 1) console.log(1111) // &#39;./test/a&#39; export const b = &#39;xx&#39; export const bbbbbbb = &#39;xx&#39;</code></p><p>rollup 打包效果（非常干净，无注入代码）</p><p>js</p><p>代码解读</p><p>复制代码</p><p><code>const b = &#39;xx&#39;; console.log(b + 1); console.log(1111);</code></p><p>webpack 打包效果（有很多注入代码）</p><ul><li>实际上，我们自己写的代码在最下面。上面注入的大段代码 都是<strong>webpack 自己的兼容代码</strong>，<strong>目的是自己实现 require，modules.exports，export，让浏览器可以兼容 cjs 和 esm 语法</strong></li><li>（可以理解为，<strong>webpack 自己实现 polyfill 支持模块语法，rollup 是利用高版本浏览器原生支持 esm(所以 rollup 无需代码注入)</strong>）</li></ul><p>js</p><p>代码解读</p><p>复制代码</p><p><code>/******/ (function(modules) { // webpackBootstrap /******/ // The module cache /******/ var installedModules = {}; /******/ /******/ // The require function /******/ function __webpack_require__(moduleId) { /******/ /******/ // Check if module is in cache /******/ if(installedModules[moduleId]) { /******/ return installedModules[moduleId].exports; /******/ } /******/ // Create a new module (and put it into the cache) /******/ var module = installedModules[moduleId] = { /******/ i: moduleId, /******/ l: false, /******/ exports: {} /******/ }; /******/ /******/ // Execute the module function /******/ modules[moduleId].call(module.exports, module, module.exports, __webpack_require__); /******/ /******/ // Flag the module as loaded /******/ module.l = true; /******/ /******/ // Return the exports of the module /******/ return module.exports; /******/ } /******/ /******/ /******/ // expose the modules object (__webpack_modules__) /******/ __webpack_require__.m = modules; /******/ /******/ // expose the module cache /******/ __webpack_require__.c = installedModules; /******/ /******/ // define getter function for harmony exports /******/ __webpack_require__.d = function(exports, name, getter) { /******/ if(!__webpack_require__.o(exports, name)) { /******/ Object.defineProperty(exports, name, { enumerable: true, get: getter }); /******/ } /******/ }; /******/ /******/ // define __esModule on exports /******/ __webpack_require__.r = function(exports) { /******/ if(typeof Symbol !== &#39;undefined&#39; &amp;&amp; Symbol.toStringTag) { /******/ Object.defineProperty(exports, Symbol.toStringTag, { value: &#39;Module&#39; }); /******/ } /******/ Object.defineProperty(exports, &#39;__esModule&#39;, { value: true }); /******/ }; /******/ /******/ // create a fake namespace object /******/ // mode &amp; 1: value is a module id, require it /******/ // mode &amp; 2: merge all properties of value into the ns /******/ // mode &amp; 4: return value when already ns object /******/ // mode &amp; 8|1: behave like require /******/ __webpack_require__.t = function(value, mode) { /******/ if(mode &amp; 1) value = __webpack_require__(value); /******/ if(mode &amp; 8) return value; /******/ if((mode &amp; 4) &amp;&amp; typeof value === &#39;object&#39; &amp;&amp; value &amp;&amp; value.__esModule) return value; /******/ var ns = Object.create(null); /******/ __webpack_require__.r(ns); /******/ Object.defineProperty(ns, &#39;default&#39;, { enumerable: true, value: value }); /******/ if(mode &amp; 2 &amp;&amp; typeof value != &#39;string&#39;) for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key)); /******/ return ns; /******/ }; /******/ /******/ // getDefaultExport function for compatibility with non-harmony modules /******/ __webpack_require__.n = function(module) { /******/ var getter = module &amp;&amp; module.__esModule ? /******/ function getDefault() { return module[&#39;default&#39;]; } : /******/ function getModuleExports() { return module; }; /******/ __webpack_require__.d(getter, &#39;a&#39;, getter); /******/ return getter; /******/ }; /******/ /******/ // Object.prototype.hasOwnProperty.call /******/ __webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); }; /******/ /******/ // __webpack_public_path__ /******/ __webpack_require__.p = &quot;./&quot;; /******/ /******/ /******/ // Load entry module and return exports /******/ return __webpack_require__(__webpack_require__.s = 0); /******/ }) /************************************************************************/ /******/ ([ /* 0 */ /***/ (function(module, __webpack_exports__, __webpack_require__) { &quot;use strict&quot;; // ESM COMPAT FLAG __webpack_require__.r(__webpack_exports__); // CONCATENATED MODULE: ./src/test/a.js const b = &#39;xx&#39;; const bbbbbbb = &#39;xx&#39;; // CONCATENATED MODULE: ./src/main.js console.log(b + 1); console.log(1111); /***/ }) /******/ ]);</code></p><h2 id="两者处理源代码模块的对比" tabindex="-1"><a class="header-anchor" href="#两者处理源代码模块的对比"><span>两者处理源代码模块的对比</span></a></h2><table><thead><tr><th></th><th>纯 esm</th><th>纯 cjs</th><th>两者混用</th></tr></thead><tbody><tr><td>webpack</td><td>支持（有代码注入）</td><td>支持（有代码注入）</td><td>支持（有代码注入）</td></tr><tr><td>rollup</td><td><strong>支持（无注入）</strong></td><td>原生不支持（需增加插件@rollup/plugin-commonjs）</td><td>原生不支持（需增加插件@rollup/plugin-commonjs）</td></tr></tbody></table><p><strong>rollup 的初衷也是希望开发者去写 esm，而不是 cjs</strong>。因为 esm 是 javascript 的新标准，是未来，有很多优点，高版本浏览器也支持</p><h2 id="两者处理对外暴露模块-非常不一样-解释-rollup-为什么适合打包库" tabindex="-1"><a class="header-anchor" href="#两者处理对外暴露模块-非常不一样-解释-rollup-为什么适合打包库"><span>两者处理对外暴露模块，非常不一样！！（解释 rollup 为什么适合打包库）</span></a></h2><p>上面的 demo <strong>加上 export 导出</strong></p><p>js</p><p>代码解读</p><p>复制代码</p><p><code>// 入口main。js import { b } from &#39;./test/a&#39; console.log(b + 1) console.log(1111) export { // 新增导出 b } // &#39;./test/a&#39; export const b = &#39;xx&#39; export const bbbbbbb = &#39;xx&#39;</code></p><p>rollup 打包 导出（非常干净，无注入代码）</p><ul><li><p>rollup 本身不去做 polyfill</p></li><li><p>rollup 的配置文件无需特殊配置，而且还可以支持<strong>多种模块导出（esm，cjs，umd，amd）</strong></p><p>js</p><p>代码解读</p><p>复制代码</p><p><code>// rollup.config.js const OUTPUT_DIR = &#39;dist&#39; const INPUT_FILE = &#39;src/main.js&#39; export default[ // esm { input: INPUT_FILE, output: { file: OUTPUT_DIR + &#39;/esm/index.js&#39;, format: &#39;esm&#39; // 导出esm模块 } }, // commonjs { input: INPUT_FILE, output: { file: OUTPUT_DIR + &#39;/cjs/index.js&#39;, format: &#39;cjs&#39; // 导出cjs模块 } }, // umd { input: INPUT_FILE, output: { file: OUTPUT_DIR + &#39;/umd/index.js&#39;, format: &#39;umd&#39; // 导出umd模块 } }, ]</code></p><p>打包的到 esm 和 cjs</p><p>js</p><p>代码解读</p><p>复制代码</p><p><code>// esm const b = &#39;xx&#39;; console.log(b + 1); console.log(1111); export { b }; // cjs const b = &#39;xx&#39;; console.log(b + 1); console.log(1111); exports.b = b; // umd （兼容3种写法：cjs，amd，global（global可以初步理解为直接通过window传值）） (function (global, factory) { typeof exports === &#39;object&#39; &amp;&amp; typeof module !== &#39;undefined&#39; ? factory(exports) : typeof define === &#39;function&#39; &amp;&amp; define.amd ? define([&#39;exports&#39;], factory) : (global = typeof globalThis !== &#39;undefined&#39; ? globalThis : global || self, factory(global.aa = {})); })(this, (function (exports) { &#39;use strict&#39;; const b = &#39;xx&#39;; console.log(b + 1); console.log(1111); exports.b = b; Object.defineProperty(exports, &#39;__esModule&#39;, { value: true }); }));</code></p></li></ul><p>webpack 导出 （区别巨大，注入代码较多，导出 esm 支持的不太好）</p><ul><li><p>webpack 需配置 （此处是 webpack 4.x）</p><p>js</p><p>代码解读</p><p>复制代码</p><p><code>output: { ..., library: &#39;myLib&#39;, // 暴露出去的变量的名字 libraryTarget: &#39;commonjs&#39;, }</code></p><p>webpack 暂时只能支持导出 cjs 或 更往前兼容的包(umd)</p><p><strong>不支持 esm（实验性）</strong> <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cf95fb883bf6493ebce867bd78534f4f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?" alt="image.png"></p><p>我们此处导出 cjs 的包， 和 rollup 对比一下</p><ul><li>注入代码特别多，比较冗余</li></ul><p>js</p><p>代码解读</p><p>复制代码</p><p><code>exports[&quot;myLib&quot;] = /******/ (function(modules) { // webpackBootstrap /******/ // The module cache /******/ var installedModules = {}; /******/ /******/ // The require function /******/ function __webpack_require__(moduleId) { /******/ /******/ // Check if module is in cache /******/ if(installedModules[moduleId]) { /******/ return installedModules[moduleId].exports; /******/ } /******/ // Create a new module (and put it into the cache) /******/ var module = installedModules[moduleId] = { /******/ i: moduleId, /******/ l: false, /******/ exports: {} /******/ }; /******/ /******/ // Execute the module function /******/ modules[moduleId].call(module.exports, module, module.exports, __webpack_require__); /******/ /******/ // Flag the module as loaded /******/ module.l = true; /******/ /******/ // Return the exports of the module /******/ return module.exports; /******/ } /******/ /******/ /******/ // expose the modules object (__webpack_modules__) /******/ __webpack_require__.m = modules; /******/ /******/ // expose the module cache /******/ __webpack_require__.c = installedModules; /******/ /******/ // define getter function for harmony exports /******/ __webpack_require__.d = function(exports, name, getter) { /******/ if(!__webpack_require__.o(exports, name)) { /******/ Object.defineProperty(exports, name, { enumerable: true, get: getter }); /******/ } /******/ }; /******/ /******/ // define __esModule on exports /******/ __webpack_require__.r = function(exports) { /******/ if(typeof Symbol !== &#39;undefined&#39; &amp;&amp; Symbol.toStringTag) { /******/ Object.defineProperty(exports, Symbol.toStringTag, { value: &#39;Module&#39; }); /******/ } /******/ Object.defineProperty(exports, &#39;__esModule&#39;, { value: true }); /******/ }; /******/ /******/ // create a fake namespace object /******/ // mode &amp; 1: value is a module id, require it /******/ // mode &amp; 2: merge all properties of value into the ns /******/ // mode &amp; 4: return value when already ns object /******/ // mode &amp; 8|1: behave like require /******/ __webpack_require__.t = function(value, mode) { /******/ if(mode &amp; 1) value = __webpack_require__(value); /******/ if(mode &amp; 8) return value; /******/ if((mode &amp; 4) &amp;&amp; typeof value === &#39;object&#39; &amp;&amp; value &amp;&amp; value.__esModule) return value; /******/ var ns = Object.create(null); /******/ __webpack_require__.r(ns); /******/ Object.defineProperty(ns, &#39;default&#39;, { enumerable: true, value: value }); /******/ if(mode &amp; 2 &amp;&amp; typeof value != &#39;string&#39;) for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key)); /******/ return ns; /******/ }; /******/ /******/ // getDefaultExport function for compatibility with non-harmony modules /******/ __webpack_require__.n = function(module) { /******/ var getter = module &amp;&amp; module.__esModule ? /******/ function getDefault() { return module[&#39;default&#39;]; } : /******/ function getModuleExports() { return module; }; /******/ __webpack_require__.d(getter, &#39;a&#39;, getter); /******/ return getter; /******/ }; /******/ /******/ // Object.prototype.hasOwnProperty.call /******/ __webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); }; /******/ /******/ // __webpack_public_path__ /******/ __webpack_require__.p = &quot;./&quot;; /******/ /******/ /******/ // Load entry module and return exports /******/ return __webpack_require__(__webpack_require__.s = 0); /******/ }) /************************************************************************/ /******/ ([ /* 0 */ /***/ (function(module, __webpack_exports__, __webpack_require__) { &quot;use strict&quot;; // ESM COMPAT FLAG __webpack_require__.r(__webpack_exports__); // EXPORTS 这一行是处理esm的导出，因为我们用的是 export { b: xx }， 如果我们用cjs的导出 比如 module.exports = { b: xx }， 此处就会没有，会更简单，直接是 module.exports = { b: xx } __webpack_require__.d(__webpack_exports__, &quot;b&quot;, function() { return /* reexport */ b; }); // CONCATENATED MODULE: ./src/test/a.js const b = &#39;xx&#39;; const bbbbbbb = &#39;xx&#39;; // CONCATENATED MODULE: ./src/main.js console.log(b + 1); console.log(1111); /***/ }) /******/ ]);</code></p><p>注意看 倒数第 10 多行，有个</p><p>java</p><p>代码解读</p><p>复制代码</p><p><code>// EXPORTS __webpack_require__.d(__webpack_exports__, &quot;b&quot;, function() { return /* reexport */ b; }); 这一行是处理esm的导出，因为我们用的是 export { b: xx }， 如果我们用cjs的导出 比如 module.exports = { b: xx }， 此处就会没有此行，会更简单，直接是 module.exports = { b: xx } （ webpack会自己模拟实现 module.exports ）</code></p></li></ul><h2 id="为什么-webpack-需要注入这么多代码" tabindex="-1"><a class="header-anchor" href="#为什么-webpack-需要注入这么多代码"><span>为什么 webpack 需要注入这么多代码？</span></a></h2><p>因为 webpack 比 rollup 早出 2 年，诞生在 esm 标准出来前，commonjs 出来后</p><ul><li>当时的浏览器只能通过 script 标签加载模块 <ul><li><strong>script 标签加载代码是没有作用域的，只能在代码内 用 iife 的方式 实现作用域效果</strong>， <ul><li><strong>这就是 webpack 打包出来的代码 大结构都是 iife 的原因</strong></li><li>并且<strong>每个模块都要装到 function 里面</strong>，才能保证互相之间作用域不干扰。</li><li><strong>这就是为什么 webpack 打包的代码为什么乍看会感觉乱，找不到自己写的代码的真正原因</strong></li></ul></li></ul></li><li>关于 webpack 的代码注入问题，是因为<strong>浏览器不支持 cjs</strong>，所以<strong>webpack 要去自己实现 require 和 module.exports 方法</strong>（才有很多注入）（webpack 自己实现 polyfill） <ul><li>这么多年了，甚至到现在 2022 年，<strong>浏览器为什么不支持 cjs</strong>？ <ul><li><strong>cjs 是同步的，运行时的，node 环境用 cjs，node 本身运行在服务器，无需等待网络握手，所以同步处理是很快的</strong></li><li><strong>浏览器是 客户端，访问的是服务端资源，中间需要等待网络握手，可能会很慢，所以不能 同步的 卡在那里等服务器返回的，体验太差</strong></li></ul></li></ul></li><li><strong>后续出来 esm 后，webpack 为了兼容以前发在 npm 上的老包</strong>（并且当时心还不够决绝，导致这种“丑结构的包”越来越多，以后就更不可能改这种“丑结构了”），所以保留这个 iife 的结构和代码注入，<strong>导致现在看 webpack 打包的产物，乍看结构比较乱且有很多的代码注入，自己写的代码都找不到</strong></li></ul><p>rollup 诞生于 esm 标准出来后，就是针对 esm 设计的，也没有历史包袱，所以可以做到真正的“打包”（精简，无额外注入）</p><ul><li>（根据 npm 版本上传显示最早上传时间： <strong>webpack 是 2013 年左右，rollup 是 2015.5</strong>）</li></ul><h2 id="rollup-如何打包第三方依赖-和-懒加载模块-和-公共模块" tabindex="-1"><a class="header-anchor" href="#rollup-如何打包第三方依赖-和-懒加载模块-和-公共模块"><span>rollup 如何打包第三方依赖 和 懒加载模块 和 公共模块？</span></a></h2><p>和 webpack 打包一样，有两种：单 chunk 包 和 多 chunk 包</p><ol><li><p>单 chunk 包</p><p>无额外配置，一般会把所有 js 打成一个包。打包外部依赖（第三方）也是一样的。比如：</p><p>js</p><p>代码解读</p><p>复制代码</p><p><code>// 入口 main.js import Axios from &#39;axios&#39; Axios.get() console.log(1111) ------ 打包后的结果 ------ // 最终会把axios的源代码 和 main.js 主代码，打包到一个文件内，无额外代码注入 // 以下是截取了一头一尾，中间省略 import require$$1$1 from &#39;http&#39;; import require$$2 from &#39;https&#39;; import require$$0$1 from &#39;url&#39;; import require$$3 from &#39;assert&#39;; import require$$4 from &#39;stream&#39;; import require$$0 from &#39;tty&#39;; import require$$1 from &#39;util&#39;; import require$$7 from &#39;zlib&#39;; var axios$1 = {exports: {}}; var bind$2 = function bind(fn, thisArg) { return function wrap() { var args = new Array(arguments.length); for (var i = 0; i &lt; args.length; i++) { args[i] = arguments[i]; } return fn.apply(thisArg, args); }; }; ... ... ... axios$1.exports = axios; // Allow use of default import syntax in TypeScript axios$1.exports.default = axios; var _axios_0_18_1_axios = axios$1.exports; _axios_0_18_1_axios.get(); console.log(1111);</code></p><p><strong>此处 rollup 打包有个注意点</strong>：</p><ul><li><p>很多第三方依赖很早就有了，所以用的是<strong>commonjs 模块导出</strong>，rollup 打包的话，需要安装插件@rollup/plugin-node-resolve。因为是 cjs 的包，所以也不存在 tree shaking</p><ul><li>插件原理是，把 cjs 的包，转成 esm 包，在打包</li></ul></li><li><p>现在比较流行的 monorepo，就是完全用 esm 写库+rollup 打包，可以很轻易的做到 tree shaking，<strong>让核心库变的更小，解析速度更快，还可以对外提供工具，扩大影响力</strong></p></li></ul></li><li><p>多个 chunk 包（代码分离）</p><ol><li><p>配置多个入口，此法比较简单，可自行测试</p><p>js</p><p>代码解读</p><p>复制代码</p><p><code>// rollup.config.js input: { index: &#39;src/main.js&#39;, other: &#39;src/other.js&#39;, },</code></p></li><li><p>代码分离 （<strong>动态 import，懒加载， import(xxx).then(module =&gt; {})</strong> ）</p></li></ol><ul><li><p><a href="https://link.juejin.cn?target=https%3A%2F%2Frollupjs.org%2Frepl%2F%3Fversion%3D1.6.0%26shareable%3DJTdCJTIybW9kdWxlcyUyMiUzQSU1QiU3QiUyMm5hbWUlMjIlM0ElMjJtYWluLmpzJTIyJTJDJTIyY29kZSUyMiUzQSUyMiUyRiolMjBEWU5BTUlDJTIwSU1QT1JUUyU1Q24lMjAlMjAlMjBSb2xsdXAlMjBzdXBwb3J0cyUyMGF1dG9tYXRpYyUyMGNodW5raW5nJTIwYW5kJTIwbGF6eS1sb2FkaW5nJTVDbiUyMCUyMCUyMHZpYSUyMGR5bmFtaWMlMjBpbXBvcnRzJTIwdXRpbGl6aW5nJTIwdGhlJTIwaW1wb3J0JTIwbWVjaGFuaXNtJTVDbiUyMCUyMCUyMG9mJTIwdGhlJTIwaG9zdCUyMHN5c3RlbS4lMjAqJTJGJTVDbmlmJTIwKGRpc3BsYXlNYXRoKSUyMCU3QiU1Q24lNUN0aW1wb3J0KCcuJTJGbWF0aHMuanMnKS50aGVuKGZ1bmN0aW9uJTIwKG1hdGhzKSUyMCU3QiU1Q24lNUN0JTVDdGNvbnNvbGUubG9nKG1hdGhzLnNxdWFyZSg1KSklM0IlNUNuJTVDdCU1Q3Rjb25zb2xlLmxvZyhtYXRocy5jdWJlKDUpKSUzQiU1Q24lNUN0JTdEKSUzQiU1Q24lN0QlMjIlMkMlMjJpc0VudHJ5JTIyJTNBdHJ1ZSU3RCUyQyU3QiUyMm5hbWUlMjIlM0ElMjJtYXRocy5qcyUyMiUyQyUyMmNvZGUlMjIlM0ElMjJpbXBvcnQlMjBzcXVhcmUlMjBmcm9tJTIwJy4lMkZzcXVhcmUuanMnJTNCJTVDbiU1Q25leHBvcnQlMjAlN0JkZWZhdWx0JTIwYXMlMjBzcXVhcmUlN0QlMjBmcm9tJTIwJy4lMkZzcXVhcmUuanMnJTNCJTVDbiU1Q25leHBvcnQlMjBmdW5jdGlvbiUyMGN1YmUlMjAoeCUyMCklMjAlN0IlNUNuJTVDdHJldHVybiUyMHNxdWFyZSh4KSUyMColMjB4JTNCJTVDbiU3RCUyMiUyQyUyMmlzRW50cnklMjIlM0FmYWxzZSU3RCUyQyU3QiUyMm5hbWUlMjIlM0ElMjJzcXVhcmUuanMlMjIlMkMlMjJjb2RlJTIyJTNBJTIyZXhwb3J0JTIwZGVmYXVsdCUyMGZ1bmN0aW9uJTIwc3F1YXJlJTIwKCUyMHglMjApJTIwJTdCJTVDbiU1Q3RyZXR1cm4lMjB4JTIwKiUyMHglM0IlNUNuJTdEJTIyJTJDJTIyaXNFbnRyeSUyMiUzQWZhbHNlJTdEJTVEJTJDJTIyb3B0aW9ucyUyMiUzQSU3QiUyMmZvcm1hdCUyMiUzQSUyMmNqcyUyMiUyQyUyMm5hbWUlMjIlM0ElMjJteUJ1bmRsZSUyMiUyQyUyMmFtZCUyMiUzQSU3QiUyMmlkJTIyJTNBJTIyJTIyJTdEJTJDJTIyZ2xvYmFscyUyMiUzQSU3QiU3RCU3RCUyQyUyMmV4YW1wbGUlMjIlM0FudWxsJTdE" title="https://rollupjs.org/repl/?version=1.6.0&amp;shareable=JTdCJTIybW9kdWxlcyUyMiUzQSU1QiU3QiUyMm5hbWUlMjIlM0ElMjJtYWluLmpzJTIyJTJDJTIyY29kZSUyMiUzQSUyMiUyRiolMjBEWU5BTUlDJTIwSU1QT1JUUyU1Q24lMjAlMjAlMjBSb2xsdXAlMjBzdXBwb3J0cyUyMGF1dG9tYXRpYyUyMGNodW5raW5nJTIwYW5kJTIwbGF6eS1sb2FkaW5nJTVDbiUyMCUyMCUyMHZpYSUyMGR5bmFtaWMlMjBpbXBvcnRzJTIwdXRpbGl6aW5nJTIwdGhlJTIwaW1wb3J0JTIwbWVjaGFuaXNtJTVDbiUyMCUyMCUyMG9mJTIwdGhlJTIwaG9zdCUyMHN5c3RlbS4lMjAqJTJGJTVDbmlmJTIwKGRpc3BsYXlNYXRoKSUyMCU3QiU1Q24lNUN0aW1wb3J0KCcuJTJGbWF0aHMuanMnKS50aGVuKGZ1bmN0aW9uJTIwKG1hdGhzKSUyMCU3QiU1Q24lNUN0JTVDdGNvbnNvbGUubG9nKG1hdGhzLnNxdWFyZSg1KSklM0IlNUNuJTVDdCU1Q3Rjb25zb2xlLmxvZyhtYXRocy5jdWJlKDUpKSUzQiU1Q24lNUN0JTdEKSUzQiU1Q24lN0QlMjIlMkMlMjJpc0VudHJ5JTIyJTNBdHJ1ZSU3RCUyQyU3QiUyMm5hbWUlMjIlM0ElMjJtYXRocy5qcyUyMiUyQyUyMmNvZGUlMjIlM0ElMjJpbXBvcnQlMjBzcXVhcmUlMjBmcm9tJTIwJy4lMkZzcXVhcmUuanMnJTNCJTVDbiU1Q25leHBvcnQlMjAlN0JkZWZhdWx0JTIwYXMlMjBzcXVhcmUlN0QlMjBmcm9tJTIwJy4lMkZzcXVhcmUuanMnJTNCJTVDbiU1Q25leHBvcnQlMjBmdW5jdGlvbiUyMGN1YmUlMjAoeCUyMCklMjAlN0IlNUNuJTVDdHJldHVybiUyMHNxdWFyZSh4KSUyMColMjB4JTNCJTVDbiU3RCUyMiUyQyUyMmlzRW50cnklMjIlM0FmYWxzZSU3RCUyQyU3QiUyMm5hbWUlMjIlM0ElMjJzcXVhcmUuanMlMjIlMkMlMjJjb2RlJTIyJTNBJTIyZXhwb3J0JTIwZGVmYXVsdCUyMGZ1bmN0aW9uJTIwc3F1YXJlJTIwKCUyMHglMjApJTIwJTdCJTVDbiU1Q3RyZXR1cm4lMjB4JTIwKiUyMHglM0IlNUNuJTdEJTIyJTJDJTIyaXNFbnRyeSUyMiUzQWZhbHNlJTdEJTVEJTJDJTIyb3B0aW9ucyUyMiUzQSU3QiUyMmZvcm1hdCUyMiUzQSUyMmNqcyUyMiUyQyUyMm5hbWUlMjIlM0ElMjJteUJ1bmRsZSUyMiUyQyUyMmFtZCUyMiUzQSU3QiUyMmlkJTIyJTNBJTIyJTIyJTdEJTJDJTIyZ2xvYmFscyUyMiUzQSU3QiU3RCU3RCUyQyUyMmV4YW1wbGUlMjIlM0FudWxsJTdE" target="_blank" rel="noopener noreferrer">此处有一个官方的例子，再清楚不过了</a></p><p>js</p><p>代码解读</p><p>复制代码</p><p><code>// 入口 main.js /* DYNAMIC IMPORTS 动态import Rollup supports automatic chunking and lazy-loading Rollup支持自动分块和懒加载 via dynamic imports utilizing the import mechanism 通过dynamic imports动态导入 of the host system. */ if (displayMath) { import(&#39;./maths.js&#39;).then(function (maths) { console.log(maths.square(5)); console.log(maths.cube(5)); }); } // &#39;./maths.js&#39; import square from &#39;./square.js&#39;; export {default as square} from &#39;./square.js&#39;; export function cube (x ) { return square(x) * x; } // &#39;./square.js&#39; export default function square ( x ) { return x * x; } ---------------- 打包结果 ---------------- // main.js &#39;use strict&#39;; /* DYNAMIC IMPORTS 动态import Rollup supports automatic chunking and lazy-loading Rollup支持自动分块和懒加载 via dynamic imports utilizing the import mechanism 通过dynamic imports动态导入 of the host system. */ if (displayMath) { // 打包成cjs模块的话，import替换成 Promise + require // Promise.resolve(require(&#39;../chunk-0ee5c472.js&#39;)).then(function (maths) { import(&#39;../chunk-c4d97f01.js&#39;).then(function (maths) { console.log(maths.square(5)); console.log(maths.cube(5)); }); } // &#39;../chunk-0ee5c472.js&#39; &#39;use strict&#39;; function square ( x ) { return x * x; } function cube (x ) { return square(x) * x; } exports.cube = cube; exports.square = square;</code></p><p>对于代码分割，还有一种方法可以通过 <strong>output.manualChunks</strong> 选项<strong>显式</strong>告诉 Rollup 哪些模块要<strong>分割成单独的块</strong>。</p><p><strong>总结</strong>：</p><ul><li><p><strong>动态 import，rollup 对比 webpack 打包后的模块格式的支持度</strong></p><table><thead><tr><th>打包后的模块格式：</th><th>esm</th><th>cjs</th><th>amd</th><th>umd</th></tr></thead><tbody><tr><td>webpack</td><td>不支持，实验中</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>rollup</td><td>支持</td><td>支持</td><td>支持</td><td>不支持</td></tr></tbody></table></li><li><p>实现原理，对比 webpack：</p><ul><li>webpack 是<strong>自己实现的“动态 import“</strong>（借助 promise + script 标签 + window 对象 + 模拟 import 方法）</li><li>rollup 是 （打包成 esm 模块）利用浏览器（chorme63 以上）天然支持<a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FJavaScript%2FReference%2FStatements%2Fimport%23%25E5%258A%25A8%25E6%2580%2581import" title="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/import#%E5%8A%A8%E6%80%81import" target="_blank" rel="noopener noreferrer">动态 import</a><ul><li>或 （打包成 cjs 模块）promise + cjs 的 require</li></ul></li></ul></li><li><p><strong>此处有个很重要细节点</strong></p><ul><li>rollup 打的包，如果要用 动态 import（现在 vue 和 react 的单页项目 特别流行用动态 import 加载路由，算硬需求了），<strong>注意 如果要在浏览器上跑，首先要是 esm 的包（浏览器不支持 cjs），然后浏览器版本要注意（chorme63 以上）</strong><ul><li>因为 rollup 不做额外代码注入，完全利用高版本浏览器原生支持 import（所以代码特别干净，webpack 会做大量的兼容 自己实现 require 和 import） <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f0b0bf8de76c41dc9f96ad8c4ad7c313~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?" alt="esm-compatible.png"></li></ul></li></ul></li></ul></li></ul><ol start="3"><li><p>rollup 如何处理公共模块？（比如， a、b、c 3 个模块 同时依赖 d）</p><p><strong>有 2 种情况：</strong></p><ol><li><p>源代码内 <strong>不存在 动态 import</strong>，那么会打成<strong>一个 chunk</strong>（a、b、c、d 4 个模块都在一包内，d 只正常有一份）</p></li><li><p>源代码内 <strong>存在 懒加载模块，并且懒加载的模块也访问了公共依赖</strong>，比如</p><p>js</p><p>代码解读</p><p>复制代码</p><p><code>// 入口 main.js import {deepCopy} from &#39;@xxx/methods/deepCopy.js&#39; // 这是放在公司的npm域内的一个包，可以理解为export一个简单的deepCopy函数 console.log(deepCopy(a)) import(&#39;./test/a&#39;).then(e =&gt; { console.log(e) }) // &#39;./test/a&#39; 懒加载模块 也依赖 同一公共模块 import {deepCopy} from &#39;@xxx/methods/deepCopy.js&#39; const a = {a: 1} export const b = deepCopy(a) ---------- 是否会把 公共依赖 打包2份呢? -------------- 答案是no，rollup还是牛p，公共依赖只会出来一份，然后对外 export （此处举例是导出esm格式， 亲测导出cjs格式一样的可以，此处就不赘述，有兴趣可以自己test一下） 生成的目录结构，有3个文件 a-19173be8.js main.js main-219c2eaf.js // main.js import &#39;./main-219c2eaf.js&#39;; // main-219c2eaf.js const deepCopy = function (obj) { // do .. }; console.log(deepCopy(a)); import(&#39;./a-19173be8.js&#39;).then(e =&gt; { console.log(e); }); // a-19173be8.js import { d as deepCopy } from &#39;./main-219c2eaf.js&#39;; const a = {a: 1}; const b = deepCopy(a); export { b };</code></p><p>总结：<strong>对于公共依赖，rollup 不会出现重复打包的情况！并且完全无注入代码！无需额外配置。</strong> 对比 webpack 的话，webpack 需要配置 optimization.splitChunks （webpack4.x 以上）</p></li></ol></li></ol></li></ol><h2 id="总结-rollup-vs-webpack" tabindex="-1"><a class="header-anchor" href="#总结-rollup-vs-webpack"><span><strong>总结</strong> rollup vs webpack</span></a></h2><h3 id="rollup-诞生在-esm-标准出来后" tabindex="-1"><a class="header-anchor" href="#rollup-诞生在-esm-标准出来后"><span>rollup 诞生在 esm 标准出来后</span></a></h3><ul><li><strong>出发点就是希望开发者去写 esm 模块</strong>，这样适合做代码静态分析，可以做 tree shaking 减少代码体积，也是浏览器除了 script 标签外，真正让 JavaScript 拥有模块化能力。是 js 语言的未来</li><li><strong>rollup 完全依赖高版本浏览器原生去支持 esm 模块，所以无额外代码注入，打包后的代码结构也是清晰的</strong>（不用像 webpack 那样 iife） <ul><li>目前浏览器支持模块化只有 3 种方法： <ol><li>①script 标签（缺点没有作用域的概念）</li><li>②script 标签 + iife + window + 函数作用域（可以解决作用域问题。webpack 的打包的产物就这样）</li><li>③esm （什么都好，唯一缺点 需要高版本浏览器）</li></ol></li></ul></li></ul><h3 id="webpack-诞生在-esm-标准出来前-commonjs-出来后" tabindex="-1"><a class="header-anchor" href="#webpack-诞生在-esm-标准出来前-commonjs-出来后"><span>webpack 诞生在 esm 标准出来前，commonjs 出来后</span></a></h3><ul><li>当时的浏览器只能通过 script 标签加载模块 <ul><li><strong>script 标签加载代码是没有作用域的，只能在代码内 用 iife 的方式 实现作用域效果</strong>， <ul><li><strong>这就是 webpack 打包出来的代码 大结构都是 iife 的原因</strong></li><li>并且<strong>每个模块都要装到 function 里面</strong>，才能保证互相之间作用域不干扰。</li><li><strong>这就是为什么 webpack 打包的代码为什么乍看会感觉乱，找不到自己写的代码的真正原因</strong></li></ul></li></ul></li><li>关于 webpack 的代码注入问题，是因为<strong>浏览器不支持 cjs</strong>，所以<strong>webpack 要去自己实现 require 和 module.exports 方法</strong>（才有很多注入） <ul><li>这么多年了，甚至到现在 2022 年，<strong>浏览器为什么不支持 cjs</strong>？ <ul><li><strong>cjs 是同步的，运行时的，node 环境用 cjs，node 本身运行在服务器，无需等待网络握手，所以同步处理是很快的</strong></li><li><strong>浏览器是 客户端，访问的是服务端资源，中间需要等待网络握手，可能会很慢，所以不能 同步的 卡在那里等服务器返回的，体验太差</strong></li></ul></li></ul></li><li><strong>后续出来 esm 后，webpack 为了兼容以前发在 npm 上的老包</strong>（并且当时心还不够决绝，导致这种“丑结构的包”越来越多，以后就更不可能改这种“丑结构了”），所以保留这个 iife 的结构和代码注入，<strong>导致现在看 webpack 打包的产物，乍看结构比较乱且有很多的代码注入，自己写的代码都找不到</strong></li></ul><h2 id="最终使用推荐" tabindex="-1"><a class="header-anchor" href="#最终使用推荐"><span>最终使用推荐</span></a></h2><ol><li><p>打包<strong>开源库</strong>：<strong>不用思考，rollup 会是你更好的选择</strong></p><ul><li>rollup 本身也支持很多插件，生态也成熟，各种场景几乎都能照顾到</li></ul></li><li><p>打包<strong>应用程序</strong>：个人推荐，看您的 应用程序 <strong>需不需要兼容老浏览器</strong></p><p>兼容表如下（其实就是 动态 import 的兼容表 ） 以 chorme 为例，需要 chorme63 以上 <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f0b0bf8de76c41dc9f96ad8c4ad7c313~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?" alt="esm-compatible.png"></p><p><strong>如果不考虑兼容老浏览器，建议用 vite 开发应用程序</strong>（<a href="https://link.juejin.cn?target=https%3A%2F%2Fcn.vitejs.dev%2Fguide%2Fwhy.html" title="https://cn.vitejs.dev/guide/why.html" target="_blank" rel="noopener noreferrer">vite 官网（react/vue/ts 都支持）</a> ）</p><ul><li><strong>dev 开发方面</strong>：vite 提供 dev 服务器，以及比 webpack 快的多的热更新，dev 开发的体验更好了</li><li><strong>prd 生产方面</strong>：vite 打生产包，实际上用的就是<strong>rollup</strong>，笔者用 vite 已经上过真实项目，开发体验很棒，<strong>打的生产包比用 webpack 小了很多，有不错的性能提升</strong><ul><li>vite 的优点和特点，可以看我另一篇：<a href="https://juejin.cn/post/7050293652739850271" title="https://juejin.cn/post/7050293652739850271" target="_blank" rel="noopener noreferrer">vite 原理浅析-dev 篇（对比 webpack）</a></li></ul></li><li><strong>理论上 chorme63 以上 可以开箱即用，chorme63 以下也不是完全不能用</strong>，需要自己加<strong>polyfill</strong>或 vite 插件（<a href="https://link.juejin.cn?target=https%3A%2F%2Fcn.vitejs.dev%2Fguide%2Fbuild.html%23browser-compatibility" title="https://cn.vitejs.dev/guide/build.html#browser-compatibility" target="_blank" rel="noopener noreferrer">vite 推荐的兼容做法</a> ）</li></ul></li></ol><hr><p>篇幅有点长，最好先对 webpack 有充分的了解，在看此篇，会更好理解 和 全面对比。了解 webpack 可以先看笔者的上篇 <a href="https://juejin.cn/post/7053998924071174175" title="https://juejin.cn/post/7053998924071174175" target="_blank" rel="noopener noreferrer">webpack 打包产物解析及原理（含 cjs/esm/代码分离/懒加载）</a></p><p>笔者建议，最好自己上手打包 调试，得到的打包产物 并仔细分析。一时看不懂的话，也可以收藏本文，过段时间在看，先了解前置知识</p><p>最后，感谢爱学习的你，谢谢点赞！</p><p>本文转自 <a href="https://juejin.cn/post/7054752322269741064/" target="_blank" rel="noopener noreferrer">https://juejin.cn/post/7054752322269741064/</a></p>',61)]))}const a=t(p,[["render",i]]),u=JSON.parse('{"path":"/article/roqfufms/","title":"rollup打包产物解析及原理","lang":"zh-CN","frontmatter":{"title":"rollup打包产物解析及原理","author":"李嘉明","createTime":"2024/12/22 20:29:57","permalink":"/article/roqfufms/","tags":["node"],"description":"上篇： webpack 打包产物解析及原理（含 cjs/esm/代码分离/懒加载） rollup 定位 rollup 比 webpack 晚出 2 年，对比 webpack 肯定是有差异化的 我们可以查看官网rollupjs.org/guide/en/#o… 得到以下几个特点 建议开发者使用 esm 写模块。 使用 esm 模块的好处就很多了：（可以参...","head":[["meta",{"property":"og:url","content":"http://garmin21.github.io/jm-blog/article/roqfufms/"}],["meta",{"property":"og:site_name","content":"Garming"}],["meta",{"property":"og:title","content":"rollup打包产物解析及原理"}],["meta",{"property":"og:description","content":"上篇： webpack 打包产物解析及原理（含 cjs/esm/代码分离/懒加载） rollup 定位 rollup 比 webpack 晚出 2 年，对比 webpack 肯定是有差异化的 我们可以查看官网rollupjs.org/guide/en/#o… 得到以下几个特点 建议开发者使用 esm 写模块。 使用 esm 模块的好处就很多了：（可以参..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cf95fb883bf6493ebce867bd78534f4f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-22T12:56:54.000Z"}],["meta",{"property":"article:author","content":"李嘉明"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:modified_time","content":"2024-12-22T12:56:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"rollup打包产物解析及原理\\",\\"image\\":[\\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cf95fb883bf6493ebce867bd78534f4f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?\\",\\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f0b0bf8de76c41dc9f96ad8c4ad7c313~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?\\",\\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f0b0bf8de76c41dc9f96ad8c4ad7c313~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?\\"],\\"dateModified\\":\\"2024-12-22T12:56:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"李嘉明\\"}]}"]]},"headers":[],"readingTime":{"minutes":18.63,"words":5588},"git":{"updatedTime":1734872214000},"autoDesc":true,"filePathRelative":"1.前端/5.Node/rollup打包产物解析及原理.md","categoryList":[{"id":"72e6d5","sort":1,"name":"前端"},{"id":"8ce9db","sort":5,"name":"Node"}],"bulletin":false}');export{a as comp,u as data};

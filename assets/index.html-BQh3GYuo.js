import{_ as i,c as e,a as t,o as a}from"./app-CRTfa2T9.js";const n="/jm-blog/element-ui/el-select.png",l={};function p(h,s){return a(),e("div",null,s[0]||(s[0]=[t('<p>今天遇到一个，极为无语的 bug ，el-select 下拉组件，跑出视口，大概原因就算 el-select 使用到的自动计算的库，第二次计算的时候，位置计算错误了。具体如何计算的就不清楚了</p><p><img src="'+n+`" alt="select"></p><p>最后，前前后后，搞了一个小时，查资料，当我给 select 加上以下这一段代码时，问题解决</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">export</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> default</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  methods</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // select 下拉打开，请求数据</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    handleVisibleChange</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">val</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">      this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$nextTick</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">val</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">          // 在下一次DOM 更新后，去请求数据接口</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">          this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">more</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      });</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>猜测分析问题的原因：</p><p>select 在数据没有显示前，计算的位置 是正确的， 当数据请求回来后，第一次显示正确，select 内部是使用 v-show 进行显示和隐藏，所以 v-show 并不是真正把DOM 删除，select 没有销毁，他就会，记住上一次的信息，然后，下次用上一次的信息，去打开下拉</p><p>为什么，要缓存上一次的信息，我估计，也是为了复用 提升性能</p><p><strong>这个问题出现的原因，可能就是，是 打开请求的数据，如果是 一开始就把数据填充好了，是不是就不会，这样？</strong></p>`,8)]))}const k=i(l,[["render",p]]),d=JSON.parse('{"path":"/article/ydriumdm/","title":"el-select 悬浮出视口","lang":"zh-CN","frontmatter":{"title":"el-select 悬浮出视口","author":"李嘉明","createTime":"2024/12/20 13:49:04","permalink":"/article/ydriumdm/","tags":["element-ui"],"description":"今天遇到一个，极为无语的 bug ，el-select 下拉组件，跑出视口，大概原因就算 el-select 使用到的自动计算的库，第二次计算的时候，位置计算错误了。具体如何计算的就不清楚了 select 最后，前前后后，搞了一个小时，查资料，当我给 select 加上以下这一段代码时，问题解决 猜测分析问题的原因： select 在数据没有显示前，计...","head":[["meta",{"property":"og:url","content":"http://garmin21.github.io/jm-blog/article/ydriumdm/"}],["meta",{"property":"og:site_name","content":"Garming"}],["meta",{"property":"og:title","content":"el-select 悬浮出视口"}],["meta",{"property":"og:description","content":"今天遇到一个，极为无语的 bug ，el-select 下拉组件，跑出视口，大概原因就算 el-select 使用到的自动计算的库，第二次计算的时候，位置计算错误了。具体如何计算的就不清楚了 select 最后，前前后后，搞了一个小时，查资料，当我给 select 加上以下这一段代码时，问题解决 猜测分析问题的原因： select 在数据没有显示前，计..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://garmin21.github.io/jm-blog/element-ui/el-select.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-20T05:55:43.000Z"}],["meta",{"property":"article:author","content":"李嘉明"}],["meta",{"property":"article:tag","content":"element-ui"}],["meta",{"property":"article:modified_time","content":"2024-12-20T05:55:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"el-select 悬浮出视口\\",\\"image\\":[\\"http://garmin21.github.io/jm-blog/element-ui/el-select.png\\"],\\"dateModified\\":\\"2024-12-20T05:55:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"李嘉明\\"}]}"]]},"headers":[],"readingTime":{"minutes":1.12,"words":335},"git":{"updatedTime":1734674143000},"autoDesc":true,"filePathRelative":"1.前端/9.框架/element-ui/select-bug1.md","categoryList":[{"id":"72e6d5","sort":1,"name":"前端"},{"id":"c6689c","sort":9,"name":"框架"},{"id":"d03002","sort":10001,"name":"element-ui"}],"bulletin":false}');export{k as comp,d as data};

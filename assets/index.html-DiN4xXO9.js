import{_ as e,c as a,a as i,o as s}from"./app-WLtEyXZC.js";const n={};function l(r,t){return s(),a("div",null,t[0]||(t[0]=[i(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>选择器是我们学习 css 的最重要东西，正所谓说，工欲善其事，必先利其器。怎么好的工具，你怎么上战场？</p></div><h2 id="后代选择器" tabindex="-1"><a class="header-anchor" href="#后代选择器"><span>后代选择器</span></a></h2><ul><li>后代选择器使用使用空格隔开，选择指定后代元素(不一定是儿子)</li></ul><h2 id="子代选择器" tabindex="-1"><a class="header-anchor" href="#子代选择器"><span>子代选择器</span></a></h2><ul><li>子代选择器使用 &gt; 间隔开, 选择直接的子元素，不能选择孙子辈</li></ul><h2 id="相邻兄弟选择器" tabindex="-1"><a class="header-anchor" href="#相邻兄弟选择器"><span>相邻兄弟选择器</span></a></h2><ul><li>相邻兄弟选择器使用 + 间隔开, 选择在自己之后，离自己最近的一个兄弟元素</li></ul><h2 id="通用兄弟选择器" tabindex="-1"><a class="header-anchor" href="#通用兄弟选择器"><span>通用兄弟选择器</span></a></h2><ul><li>通用兄弟选择器使用 ~ 间隔开，选择在自己之后，的兄弟元素</li></ul><h2 id="群组选择器" tabindex="-1"><a class="header-anchor" href="#群组选择器"><span>群组选择器</span></a></h2><ul><li>将多个选择器使用 , 隔开 可以同时对多个选择器设置样式</li></ul><h2 id="属性选择器" tabindex="-1"><a class="header-anchor" href="#属性选择器"><span>属性选择器</span></a></h2><ul><li>element[attr]:元素拥有 attr 属性 就会被选择</li><li>element[attr=val]:元素拥有 attr 属性 并且属性值为 val 才会被选择</li><li>element[attr^=val]:元素拥有 attr 属性 并且属性值以 val 为开头的 才会被选择</li><li>element[attr$=val]:元素拥有 attr 属性 并且属性值以 val 为结尾的 才会被选择</li><li>element[attr*=val]:元素拥有 attr 属性 并且属性值包含 val 的 才会被选择</li></ul><h2 id="伪类选择器" tabindex="-1"><a class="header-anchor" href="#伪类选择器"><span>伪类选择器</span></a></h2><p>a 标签的四种伪类选择器</p><ul><li>a:link，定义正常链接的样式；</li><li>a:visited，定义已访问过链接的样式；</li><li>a:hover，定义鼠标悬浮在链接上时的样式；</li><li>a:active，定义鼠标点击链接时的样式。</li></ul><div class="hint-container caution"><p class="hint-container-title">STOP</p><p>位置不能互换：这 4 个选择器 优先级是一样的。顺序改变就可能后边覆盖前边的 比如 visited 写在最后，那么当连接被访问过后，访问过后的颜色就会覆盖 hover 和 active</p></div><p>关于 a 标签的颜色继承</p><ul><li>a 标签比较特殊，如果 a 标签没有 href 属性，那么继承颜色生效,</li><li>但是如果 a 标签拥有 href 属性，a 标签链接的自带样色会盖过继承,</li><li>a 的 4 个状态（有链接、被点击后、点击中、鼠标悬浮）是有自己的样式的，</li><li>只能通过伪类来控制这 4 中样式,所以在开发中给 a 标签设置颜色，需要直接对 a 标签进行设置</li></ul><h2 id="伪类" tabindex="-1"><a class="header-anchor" href="#伪类"><span>伪类</span></a></h2><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">:read-only  选取不可被用户编辑的可输入表单</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">:read-write 选取可以被用户编辑的表单元素</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">:checked    选取任何被选中的单选和多选框</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">:disabled   选取被禁用的表单元素</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">:enabled    选取未被禁用的表单元素</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">:focus      选取获取焦点的表单元素</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">:required   选取元素必填状态下的表单元素</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">:optional   非必填状态</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">:empty 		指定元素内容为空的时候的状态</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">:not()		选取除指定元素以外的元素</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">:root		对页面的根元素的有效,但root并不完全等同于html标签</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">:target		带有锚点的元素被激活时的状态</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>结构的伪类选择器</th><th style="text-align:center;">解释</th></tr></thead><tbody><tr><td>:first-child</td><td style="text-align:center;">选取一组兄弟元素中的第一个元素</td></tr><tr><td>:first-of-type</td><td style="text-align:center;">选取一组元素中，同类型的的第一个元素</td></tr><tr><td>:last-child</td><td style="text-align:center;">选取一组兄弟元素中的第最后一个元素</td></tr><tr><td>:last-of-type</td><td style="text-align:center;">选取一组元素中，同类型的的最后一个元素</td></tr><tr><td>:nth-child(an+b)</td><td style="text-align:center;">先找到当前元素的所有兄弟元素，然后按照顺序依次从0开始排序</td></tr><tr><td>:nth-last-child(an+b)</td><td style="text-align:center;">在所有的兄弟节点中由后向前匹配 其他和nth-child一样</td></tr><tr><td>:nth-of-type(an+b)</td><td style="text-align:center;">先找到当前元素的所有同类型兄弟元素，然后按照顺序依次从0开始排序</td></tr><tr><td>:nth-last-of-type(an+b)</td><td style="text-align:center;">在所有的同类型的兄弟节点中由后向前匹配 其他和nth-of-type一样</td></tr><tr><td>:only-child</td><td style="text-align:center;">匹配没有任何兄弟元素的元素</td></tr><tr><td>:only-of-type</td><td style="text-align:center;">匹配一个元素没有同类型的兄弟元素</td></tr><tr><td>:not(X)</td><td style="text-align:center;">X是一个选择器 选择所有元素中 排除X所代表元素的元素</td></tr><tr><td>:empty</td><td style="text-align:center;">选取没有子元素的元素 子元素包括元素和文本（空格和回车都包含）</td></tr></tbody></table><p>:nth-child(an+b) 可以有这么几种写法:</p><ul><li>2n+1 奇数</li><li>2n 偶数</li><li>odd 奇数</li><li>even 偶数</li><li>num 直接写数字</li><li>-n+3 选取前3个</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>注意:伪类的权重值跟类一样是10,:not(X)的权重要根据x的权重来计算</p></div><h2 id="css选择器的优先级权重" tabindex="-1"><a class="header-anchor" href="#css选择器的优先级权重"><span>css选择器的优先级权重</span></a></h2><p>!important &gt; 行内书写 &gt; id &gt; 类 &gt; 标签名 &gt; 通配符 &gt; 继承 &gt; 默认样式</p>`,27)]))}const c=e(n,[["render",l],["__file","index.html.vue"]]),p=JSON.parse('{"path":"/learn-css/css-select/","title":"CSS选择器","lang":"zh-CN","frontmatter":{"title":"CSS选择器","author":"李嘉明","tags":["CSS"],"createTime":"2024/04/20 14:53:55","permalink":"/learn-css/css-select/","description":"提示 选择器是我们学习 css 的最重要东西，正所谓说，工欲善其事，必先利其器。怎么好的工具，你怎么上战场？ 后代选择器 后代选择器使用使用空格隔开，选择指定后代元素(不一定是儿子) 子代选择器 子代选择器使用 > 间隔开, 选择直接的子元素，不能选择孙子辈 相邻兄弟选择器 相邻兄弟选择器使用 + 间隔开, 选择在自己之后，离自己最近的一个兄弟元素 通...","head":[["meta",{"property":"og:url","content":"http://garmin21.github.io/jm-blog/learn-css/css-select/"}],["meta",{"property":"og:site_name","content":"Garming"}],["meta",{"property":"og:title","content":"CSS选择器"}],["meta",{"property":"og:description","content":"提示 选择器是我们学习 css 的最重要东西，正所谓说，工欲善其事，必先利其器。怎么好的工具，你怎么上战场？ 后代选择器 后代选择器使用使用空格隔开，选择指定后代元素(不一定是儿子) 子代选择器 子代选择器使用 > 间隔开, 选择直接的子元素，不能选择孙子辈 相邻兄弟选择器 相邻兄弟选择器使用 + 间隔开, 选择在自己之后，离自己最近的一个兄弟元素 通..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-01T08:21:49.000Z"}],["meta",{"property":"article:author","content":"李嘉明"}],["meta",{"property":"article:tag","content":"CSS"}],["meta",{"property":"article:modified_time","content":"2025-01-01T08:21:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CSS选择器\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-01-01T08:21:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"李嘉明\\"}]}"]]},"headers":[],"readingTime":{"minutes":3.94,"words":1181},"git":{"updatedTime":1735719709000},"autoDesc":true,"filePathRelative":"1.前端/7.css/基础篇/selector.md","categoryList":[{"id":"72e6d5","sort":1,"name":"前端"},{"id":"7e9d4b","sort":7,"name":"css"},{"id":"84a65f","sort":10008,"name":"基础篇"}],"bulletin":false}');export{c as comp,p as data};

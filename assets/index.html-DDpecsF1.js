import{_ as s,c as a,a as e,o as t}from"./app-CR388ZiM.js";const n={};function p(l,i){return t(),a("div",null,i[0]||(i[0]=[e(`<h2 id="作用域" tabindex="-1"><a class="header-anchor" href="#作用域"><span>作用域</span></a></h2><p>作用域是指 程序源代码中，定义变量的区域。</p><p>作用域规定了如何查找变量，也就是确定当前执行代码对变量的访问权限。</p><h2 id="词法作用域" tabindex="-1"><a class="header-anchor" href="#词法作用域"><span>词法作用域</span></a></h2><p>在 <code>JavaScript</code> 中，采用的是 词法作用域， 即静态作用域。</p><p>词法作用域规定了，函数的作用域是在 <strong>函数定义的时候就确定</strong> 了。</p><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> foo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> bar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  foo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">bar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个示例的执行结果为 <code>1</code>。</p><p>在这个例子中， 由于 函数<code>foo</code> 的作用域在 定义的时候就确定了，即使在 函数<code>bar</code> 中也有相同的变量名<code>a</code>的定义， 但是由于两个函数在定义时，作用域是相互独立的，函数<code>foo</code>在其作用域查找局部变量<code>a</code>，没有找到， 继续从它书写位置往上查找上一层的代码，所以输出的结果为 <code>1</code>。</p>`,10)]))}const d=s(n,[["render",p],["__file","index.html.vue"]]),h=JSON.parse(`{"path":"/defensive-javascript/fpcpgpod/","title":"JavaScript进阶（二）— 词法作用域","lang":"zh-CN","frontmatter":{"title":"JavaScript进阶（二）— 词法作用域","createTime":"2020/02/10 11:37:25","author":"李嘉明","permalink":"/defensive-javascript/fpcpgpod/","head":[["script",{"type":"text/javascript"},"window._hmt = window._hmt || []"],["script",{"src":"https://hm.baidu.com/hm.js?49ebcb8d1abfcde890ef6f320a101db7","async":true}],["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem('vuepress-theme-appearance') || 'auto';const sm = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;if (um === 'dark' || (um !== 'light' && sm)) {document.documentElement.classList.add('dark');}})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle('mac', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"],["meta",{"property":"og:url","content":"http://garmin21.github.io/jm-blog/defensive-javascript/fpcpgpod/"}],["meta",{"property":"og:site_name","content":"Garming"}],["meta",{"property":"og:title","content":"JavaScript进阶（二）— 词法作用域"}],["meta",{"property":"og:description","content":"作用域 作用域是指 程序源代码中，定义变量的区域。 作用域规定了如何查找变量，也就是确定当前执行代码对变量的访问权限。 词法作用域 在 JavaScript 中，采用的是 词法作用域， 即静态作用域。 词法作用域规定了，函数的作用域是在 函数定义的时候就确定 了。 示例 这个示例的执行结果为 1。 在这个例子中， 由于 函数foo 的作用域在 定义的时..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-12T11:44:38.000Z"}],["meta",{"property":"article:author","content":"李嘉明"}],["meta",{"property":"article:modified_time","content":"2024-12-12T11:44:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript进阶（二）— 词法作用域\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-12T11:44:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"李嘉明\\"}]}"]],"description":"作用域 作用域是指 程序源代码中，定义变量的区域。 作用域规定了如何查找变量，也就是确定当前执行代码对变量的访问权限。 词法作用域 在 JavaScript 中，采用的是 词法作用域， 即静态作用域。 词法作用域规定了，函数的作用域是在 函数定义的时候就确定 了。 示例 这个示例的执行结果为 1。 在这个例子中， 由于 函数foo 的作用域在 定义的时..."},"headers":[{"level":2,"title":"作用域","slug":"作用域","link":"#作用域","children":[]},{"level":2,"title":"词法作用域","slug":"词法作用域","link":"#词法作用域","children":[{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]}]}],"readingTime":{"minutes":0.88,"words":263},"git":{"updatedTime":1734003878000},"autoDesc":true,"filePathRelative":"notes/JAVASCRIPT学习简记/进阶篇/词法作用域.md"}`);export{d as comp,h as data};

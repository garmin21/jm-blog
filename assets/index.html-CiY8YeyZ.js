import{_ as t,c as o,a as c,o as d}from"./app-Bx7wUcyz.js";const a={};function p(r,e){return d(),o("div",null,e[0]||(e[0]=[c('<h2 id="前言☀️" tabindex="-1"><a class="header-anchor" href="#前言☀️"><span>前言☀️</span></a></h2><ul><li>对于刚毕业踏入社会的小白前端，在习惯了<code>Vue</code>脚手架完成业务功能后自带的<code>webpack</code>打包后对于打包的印象基本上就只有一个:<code>npm run build</code></li><li>但是往往我们看招聘信息上面都有这么一行 <strong>有使用Gulp、Webpack等项目自动工程化经验者优先</strong></li><li>这时候我们就去找两者的区别，听网上简单的描述就是 <strong>这两❓干的事情都一样呀不都是优化性能吗❓</strong></li><li>说到<strong>自动化</strong>，也就是我们经常说的前端构建工具，因为构建工具就是用来让我们不做机械重复的事情，解放我们的双手，但其实<code>gulp</code>和<code>webpack</code>的定位不同，没有什么可比性就更别说是有冲突了，在翻阅了很多资料后打算在本文记录一下，如果有说的不对的地方欢迎大佬们在评论区指教~~~~😰</li></ul><h2 id="使用场景🏄" tabindex="-1"><a class="header-anchor" href="#使用场景🏄"><span>使用场景🏄</span></a></h2><p><strong>举几个简单的场景好理解一点</strong></p><ul><li>文件压缩 我们知道文件如果越大，那么在浏览器下载或者打开的速度就会越慢，而对于<code>css</code>文件和<code>js</code>文件，里面的换行和空格只是方便我们开发者去阅读但是对于计算机来说都是一样的，所以如果我们减少空格和换行也可以减少文件大小。</li><li>文件合并 我们一个网站肯定不止有一个<code>js</code>文件那么如果<code>js</code>文件越多，浏览器并发下载总的速度越慢，如果可以减少<code>js</code>文件数量是不是也可以加快速度呢？</li></ul><p><strong>当然还有我们开发经常遇到的很多场景和苦恼的地方，我们要解决这些问题包括图片大小之类的在之前都需要自己去压缩网站压缩但是有了自动化构建工具我们就可以提高我们开发效率让我们的注重点放在打代码上</strong></p><h2 id="gulp⌛️" tabindex="-1"><a class="header-anchor" href="#gulp⌛️"><span>gulp⌛️</span></a></h2><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/653711409f6c4ae9a4bff87a5daaa27f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image.png"></p><ul><li>正如官网所说 <strong>gulp将开发流程中让人痛苦或耗时的任务自动化，从而减少你所浪费的时间、创造更大价值</strong></li><li><code>gulp</code>注重前端开发流程，<code>gulp</code>可以进行<code>js</code>，<code>html</code>，<code>css</code>，<code>img</code>的压缩打包，是自动化构建工具，可以将多个<code>js</code>文件或是<code>css</code>压缩成一个文件，并且可以压缩为一行，以此来减少文件体积，加快请求速度和减少请求次数。</li><li>不仅能对网站资源进行优化，而且在开发过程中很多重复的任务能够使用正确的工具自动完成，让我们可以专注于代码，提高工作效率，简单来说就是配置需要的插件，就能帮你把以前需要手动去做的事情给做了。 <strong><a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.gulpjs.com.cn%2Fdocs%2Fgetting-started%2Fquick-start%2F" title="https://www.gulpjs.com.cn/docs/getting-started/quick-start/" target="_blank" rel="noopener noreferrer">更多gulp使用可以前往官网阅读</a></strong></li></ul><h2 id="webpack⏳" tabindex="-1"><a class="header-anchor" href="#webpack⏳"><span>webpack⏳</span></a></h2><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9f4ef99bccb34946a83c2842b0ee1b0e~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image.png"></p><p>没错 还是这张图，想必大家对<code>webpack</code>已经挺熟悉的了</p><ul><li>正如官网所说<strong>本质上，webpack 是一个用于现代 JavaScript 应用程序的 静态模块打包工具</strong></li><li><code>webpack</code>侧重模块化打包，<code>webpack</code>只认识<code>javascript</code>，所以会把所运用的所有资源包括图片、<code>js</code>文件、<code>css</code>文件等通过<code>loader</code>和<code>plugin</code>进行处理转化成模块。 <strong><a href="https://link.juejin.cn?target=https%3A%2F%2Fwebpack.docschina.org%2F" title="https://webpack.docschina.org/" target="_blank" rel="noopener noreferrer">更多webpack使用可以前往官网阅读</a></strong></li></ul><h2 id="谈谈两者❔" tabindex="-1"><a class="header-anchor" href="#谈谈两者❔"><span>谈谈两者❔</span></a></h2><blockquote><p>缘由</p></blockquote><ul><li><p>放在以前开发者想用<code>sass</code>写<code>css</code>，项目有很多很大的图片，那么就要去编译器编译各自的文件，通过图片压缩工具去压缩图片。然后过了几天又改了需求又更换了图片，那么又要去通过压缩工具压缩图片进行如此重复的操作。然后就开发出了自动化这个流程的<strong>Grunt/Gulp</strong>,写完代码想发布就直接一句命令行就可以。</p></li><li><p>但是<code>gulp</code>解决不了模块化<code>js</code>文件的问题，于是就配置<code>sea.js</code>、<code>require.js</code>的插件用来解决<code>js</code>模块化。</p></li><li><p>后来出了一个 <code>webpack</code>说我们能不能把所有的文件都用 <code>js</code>来生成依赖，最后生成一个<code>bundle</code>呢？于是<code>webpack</code>为了解决转化不同文件而引入了<code>loader</code>比如让<code>sass-loader</code>转化<code>sass</code>变成<code>css</code>等<code>loader</code>。</p></li><li><p>后来人们发现<code>webpack</code>有个<code>plugins</code>的选项,可以用来进一步处理经过<code>loader</code> 生成的<code>bundle.js</code>，于是有人写了对应的插件,最后<code>webpack</code>也可以使用自动化构建了。 <strong>虽然两者都可以做自动化构建的工作，但是他们两个的定位是不同的。</strong></p></li></ul><blockquote><p>比较</p></blockquote><ul><li><code>gulp</code>本质上是自动化构建工具，更加注重规范前端开发流程而需要通过插件才支持模块化。</li><li><code>webpack</code>则是模块打包器，通过<code>loader</code>体系支持不同的模块,<code>plugin</code>体系提供更多额外的功能表面看<code>webpack</code>是把<code>js</code>代码进行了翻译，其实每个<code>js</code>文件都是一个个单独的模块，而<code>webpack</code>是把这些模块打包到一起的一个工具，生成一个最终的<code>js</code>。</li></ul><p>借用<a href="https://link.juejin.cn?target=https%3A%2F%2Fhome.cnblogs.com%2Fu%2Fiovec%2F" title="https://home.cnblogs.com/u/iovec/" target="_blank" rel="noopener noreferrer">@DOM哥</a>分享的一个表格从各个角度对<code>gulp</code>和<code>webpack</code>做的对比：</p><table><thead><tr><th></th><th>Gulp</th><th>Webpack</th></tr></thead><tbody><tr><td>定位</td><td>基于流的自动化构建工具</td><td>一个万能模块打包器</td></tr><tr><td>目标</td><td>自动化和优化开发工作流，为通用 website 开发而生</td><td>通用模块打包加载器，为移动端大型 SPA 应用而生</td></tr><tr><td>学习难度</td><td>易于学习，易于使用，api总共只有5个方法</td><td>有大量新的概念和api，不过好在有详尽的官方文档</td></tr><tr><td>适用场景</td><td>基于流的作业方式适合多页面应用开发</td><td>一切皆模块的特点适合单页面应用开发</td></tr><tr><td>作业方式</td><td>对输入（gulp.src）的 js，ts，scss，less 等源文件依次执行打包（bundle）、编译（compile）、压缩、重命名等处理后输出（gulp.dest）到指定目录中去，为了构建而打包</td><td>对入口文件（entry）递归解析生成依赖关系图，然后将所有依赖打包在一起，在打包之前会将所有依赖转译成可打包的 js 模块，为了打包而构建</td></tr><tr><td>使用方式</td><td>常规 js 开发，编写一系列构建任务（task）。</td><td>编辑各种 JSON 配置项</td></tr><tr><td>优点</td><td>适合多页面开发，易于学习，易于使用，接口优雅。</td><td>可以打包一切资源，适配各种模块系统</td></tr><tr><td>缺点</td><td>在单页面应用方面输出乏力，而且对流行的单页技术有些难以处理（比如 Vue 单文件组件，使用 gulp 处理就会很困难，而 webpack 一个 loader 就能轻松搞定）</td><td>不适合多页应用开发，灵活度高但同时配置很繁琐复杂。“打包一切” 这个优点对于 HTTP/1.1 尤其重要，因为所有资源打包在一起能明显减少浏览器访问页面时的资源请求数量，从而减少应用程序必须等待的时间。但这个优点可能会随着 HTTP/2 的流行而变得不那么突出，因为 HTTP/2 的多路复用可以有效解决客户端并行请求时的瓶颈问题。</td></tr><tr><td>结论</td><td>浏览器多页应用(MPA)首选方案</td><td>浏览器单页应用(SPA)首选方案</td></tr></tbody></table><h2 id="写在最后👋" tabindex="-1"><a class="header-anchor" href="#写在最后👋"><span>写在最后👋</span></a></h2><p><code>gulp</code>和<code>webpack</code>的关系举个不是很恰当的例子就是当你想去按摩店（<code>gulp</code>）放松一下，有一天你去理发店（<code>webpack</code>）洗头的小哥说可以帮你按摩一下，从那以后，你发现洗头可以顺便按摩很方便啊，于是你就安利给朋友，以后大家都这样做了。</p><ul><li>说回两者，它们本来就不是一个替代另一个的问题，不是基于另一个存在，<code>gulp</code>不是原生的，就像<code>react</code>那样，只是贴近原生。就比如就像<code>linux</code>和<code>windows</code>。</li><li><code>gulp</code>任务定义和管理<code>webpack</code>做不到,<code>gulp</code>需要拓展很多功能才能比较好支持模块化，而<code>webpack</code>本身就是模块化为核心。</li><li>这是不可比较的，就像网上说<code>Vue</code>集成的双向绑定很牛逼，但是面对很多场景<code>React</code>更牛逼，道理是一样的。当然<code>webpack</code>牛逼应该在于它的思想刚好适用于大部分场景问题，我们可能遇到的大部分问题都可以用<code>webpack</code>解决，尤其是它封装了大部分处理细节，这样让更多的人直接简单配置就可以很好的用，直接傻瓜化了，尤其是强大的拓展能力几乎让他无所不能，但是对程序员并非是绝对的好事情，就像抽象用多了忘记了底层，解决问题工具用多了，我们只能依靠解决方案吃饭，所以很多老板就会说<strong>啊？前端这么简单</strong></li><li>所以我们能做的就是提高自己的见识，多看多写代码，对应不同的应用场景使用不同的工具和不同的思想。</li><li>如果您觉得这篇文章有帮助到您的的话不妨点赞支持一下哟~~😛</li></ul><p>本文转自 <a href="https://juejin.cn/post/6959721156350296095?searchId=20241215232406CA0DD77CA26D90E978D5" target="_blank" rel="noopener noreferrer">https://juejin.cn/post/6959721156350296095?searchId=20241215232406CA0DD77CA26D90E978D5</a></p>',24)]))}const n=t(a,[["render",p],["__file","index.html.vue"]]),s=JSON.parse('{"path":"/article/rg3slx6m/","title":"谈谈gulp和webpack","lang":"zh-CN","frontmatter":{"title":"谈谈gulp和webpack","author":"李嘉明","createTime":"2024/12/22 20:28:16","permalink":"/article/rg3slx6m/","tags":["node"],"description":"前言☀️ 对于刚毕业踏入社会的小白前端，在习惯了Vue脚手架完成业务功能后自带的webpack打包后对于打包的印象基本上就只有一个:npm run build 但是往往我们看招聘信息上面都有这么一行 有使用Gulp、Webpack等项目自动工程化经验者优先 这时候我们就去找两者的区别，听网上简单的描述就是 这两❓干的事情都一样呀不都是优化性能吗❓ 说到...","head":[["meta",{"property":"og:url","content":"http://garmin21.github.io/jm-blog/article/rg3slx6m/"}],["meta",{"property":"og:site_name","content":"Garming"}],["meta",{"property":"og:title","content":"谈谈gulp和webpack"}],["meta",{"property":"og:description","content":"前言☀️ 对于刚毕业踏入社会的小白前端，在习惯了Vue脚手架完成业务功能后自带的webpack打包后对于打包的印象基本上就只有一个:npm run build 但是往往我们看招聘信息上面都有这么一行 有使用Gulp、Webpack等项目自动工程化经验者优先 这时候我们就去找两者的区别，听网上简单的描述就是 这两❓干的事情都一样呀不都是优化性能吗❓ 说到..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/653711409f6c4ae9a4bff87a5daaa27f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-22T12:56:54.000Z"}],["meta",{"property":"article:author","content":"李嘉明"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:modified_time","content":"2024-12-22T12:56:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"谈谈gulp和webpack\\",\\"image\\":[\\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/653711409f6c4ae9a4bff87a5daaa27f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\\",\\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9f4ef99bccb34946a83c2842b0ee1b0e~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\\"],\\"dateModified\\":\\"2024-12-22T12:56:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"李嘉明\\"}]}"]]},"headers":[],"readingTime":{"minutes":8.11,"words":2434},"git":{"updatedTime":1734872214000},"autoDesc":true,"filePathRelative":"1.前端/5.Node/谈谈gulp和webpack.md","categoryList":[{"id":"72e6d5","sort":1,"name":"前端"},{"id":"8ce9db","sort":5,"name":"Node"}],"bulletin":false}');export{n as comp,s as data};

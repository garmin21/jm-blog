import{_ as i,c as a,a as e,o as n}from"./app-CqdysJhZ.js";const t="/jm-blog/assets/lifecycle-W0MNXI0C.png",l={};function p(h,s){return n(),a("div",null,s[0]||(s[0]=[e('<p>平时开发代码，大家首选就是 将请求写在 mounted 中，有没有想过为啥要写在mounted中呢？</p><img title="生命周期" src="'+t+`" width="360px"><p>这是一张vue3的生命周期图，跟vue2 其实差不多，都是换了个名字而已，原理基本差不多。</p><p>可以看到 在 vue 对象被实例化后，基本干了这些事情</p><ol><li>初始化 ，收集 ref reactive 中的 数据，将其包装成一个个的响应式数据</li><li>先触发 beforeCreate 后触发 create 表示当前数据依赖已经被收集了</li><li>接下来就是 渲染虚拟dom， beforeMounted 表示即将挂载到真实dom</li><li>mounted 表示真实dom 已经挂载完成，页面此时也可以看到渲染了</li><li>。。。</li></ol><p>后面的不在过多称述了，可以看到</p><ol><li>created 钩子在实例创建后立即调用，此时数据已被设置，但 DOM 还未被渲染。适合用于发起 AJAX 请求以获取数据。</li><li>mounted 钩子在组件挂载到 DOM 后调用。如果你的请求依赖于 DOM 元素，或者需要在组件可见时执行，可以使用 mounted 钩子</li></ol><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">template</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">template</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">export</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> default</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  created</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 此时将数据转为响应式对象，为挂载到页面做准备</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    fetch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">http://xxxxxx</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">then</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">res</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> res</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">json</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()).</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">then</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">res</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">      this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">tableData</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> res</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">data</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    })</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  },</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  mounted</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 依赖dom 挂载，所以需要等 dom 挂载完成后，在进行渲染</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 在这里，比如我有一个需要操作dom 的接口</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8)]))}const r=i(l,[["render",p],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/article/owgrgn6s/","title":"vue2中深入原理-ajax请求在那个生命周期钩子中？","lang":"zh-CN","frontmatter":{"title":"vue2中深入原理-ajax请求在那个生命周期钩子中？","createTime":"2025/04/29 14:57:10","permalink":"/article/owgrgn6s/","author":"李嘉明","tags":["小课堂"],"description":"平时开发代码，大家首选就是 将请求写在 mounted 中，有没有想过为啥要写在mounted中呢？ 这是一张vue3的生命周期图，跟vue2 其实差不多，都是换了个名字而已，原理基本差不多。 可以看到 在 vue 对象被实例化后，基本干了这些事情 初始化 ，收集 ref reactive 中的 数据，将其包装成一个个的响应式数据 先触发 before...","head":[["meta",{"property":"og:url","content":"http://garmin21.github.io/jm-blog/article/owgrgn6s/"}],["meta",{"property":"og:site_name","content":"Garming"}],["meta",{"property":"og:title","content":"vue2中深入原理-ajax请求在那个生命周期钩子中？"}],["meta",{"property":"og:description","content":"平时开发代码，大家首选就是 将请求写在 mounted 中，有没有想过为啥要写在mounted中呢？ 这是一张vue3的生命周期图，跟vue2 其实差不多，都是换了个名字而已，原理基本差不多。 可以看到 在 vue 对象被实例化后，基本干了这些事情 初始化 ，收集 ref reactive 中的 数据，将其包装成一个个的响应式数据 先触发 before..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-29T07:19:32.000Z"}],["meta",{"property":"article:author","content":"李嘉明"}],["meta",{"property":"article:tag","content":"小课堂"}],["meta",{"property":"article:modified_time","content":"2025-04-29T07:19:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"vue2中深入原理-ajax请求在那个生命周期钩子中？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-29T07:19:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"李嘉明\\"}]}"]]},"headers":[],"readingTime":{"minutes":1.38,"words":415},"git":{"updatedTime":1745911172000},"autoDesc":true,"filePathRelative":"1.前端/0.小课堂/vue2的奇怪问题2.md","categoryList":[{"id":"72e6d5","sort":1,"name":"前端"},{"id":"bb13c7","sort":0,"name":"小课堂"}],"bulletin":false}');export{r as comp,d as data};

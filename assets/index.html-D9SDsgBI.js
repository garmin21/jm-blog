import{_ as i,c as o,a as r,o as t}from"./app-CqdysJhZ.js";const a={};function p(s,e){return t(),o("div",null,e[0]||(e[0]=[r('<div class="hint-container tip"><p class="hint-container-title">提问</p><ol><li>简单介绍一下 promise</li><li>说一下 Promise A+ 规范</li></ol></div><p>参阅 <a href="/article/q40nq4hv" target="_blank" rel="noopener noreferrer">详解 promise</a></p><h2 id="promise" tabindex="-1"><a class="header-anchor" href="#promise"><span>promise</span></a></h2><p>promise 是一个 异步编程解决方案，提供了一种 链式调用的方法，以一种更为扁平的方式处理复杂异步编程场景。 在早期使用 异步回调函数时，经常容易出现 在异步回调中写异步回调的回调嵌套地域，导致代码拥冗难以阅读。</p><p><code>Promise</code>是一个构造函数，用于创建一个新的 Promise 对象，该构造函数主要用于包装还没添加 promise 支持的函数。</p><h3 id="状态" tabindex="-1"><a class="header-anchor" href="#状态"><span>状态</span></a></h3><p>promise 创建后，必然出于一下三种状态之一：</p><ul><li><code>pending</code> 待定状态</li><li><code>fulfilled</code> 操作成功</li><li><code>rejected</code> 操作失败</li></ul><p>当状态从 <code>pending</code> 更新到另外一种状态后，就再也不能变更为其他状态。</p><h3 id="实例方法" tabindex="-1"><a class="header-anchor" href="#实例方法"><span>实例方法</span></a></h3><ul><li><code>.then()</code> 接受两个函数参数 ，状态从 pending 更新到另一个状态时触发</li><li><code>.cache()</code> 接受一个函数参数，状态从 pending 更新到 rejected 时触发</li><li><code>.finally()</code> 只要状态发生变化，所有 then() 和 catch() 执行完成后，最后执行 finally</li></ul><h3 id="静态方法" tabindex="-1"><a class="header-anchor" href="#静态方法"><span>静态方法</span></a></h3><ul><li><code>resolve(value)</code> 返回一个 状态为给定的 value 决定的 promise 实例</li><li><code>reject(reason)</code> 返回一个状态为失败的 promise 实例</li><li><code>all()</code> 传入一组 promise 实例并返回一个新的 promise 实例，当传入的 promises 状态均更新为成功时触发 返回实例的状态更新为成功，否则更新为失败</li><li><code>allSettled()</code> 传入一组 promise 实例并返回一个新的 promise 实例，当传入的 promises 状态均更新到最终状态， 触发返回实例 promise 的状态更新</li><li><code>race()</code> 传入一组 promise 实例并返回一个新的 promise 实例，只要传入的 promises 有一个状态更新的熬最终状态， 触发返回实例 promise 的状态更新</li></ul><h2 id="promise-a-规范" tabindex="-1"><a class="header-anchor" href="#promise-a-规范"><span>Promise A+ 规范</span></a></h2><p>Promise A+ 规范 是 一个开放、健全且通用的 Javascript Promise 标准。</p><p>规范不设计如何创建、解决和拒绝 promise，而是专注于提供一个通用的 then 方法。</p>',16)]))}const c=i(a,[["render",p],["__file","index.html.vue"]]),l=JSON.parse('{"path":"/article/a895fu8f/","title":"promise","lang":"zh-CN","frontmatter":{"title":"promise","createTime":"2022/04/17 05:53:48","author":"李嘉明","tags":["javascript"],"permalink":"/article/a895fu8f/","description":"提问 简单介绍一下 promise 说一下 Promise A+ 规范 参阅 详解 promise promise promise 是一个 异步编程解决方案，提供了一种 链式调用的方法，以一种更为扁平的方式处理复杂异步编程场景。 在早期使用 异步回调函数时，经常容易出现 在异步回调中写异步回调的回调嵌套地域，导致代码拥冗难以阅读。 Promise是一个...","head":[["meta",{"property":"og:url","content":"http://garmin21.github.io/jm-blog/article/a895fu8f/"}],["meta",{"property":"og:site_name","content":"Garming"}],["meta",{"property":"og:title","content":"promise"}],["meta",{"property":"og:description","content":"提问 简单介绍一下 promise 说一下 Promise A+ 规范 参阅 详解 promise promise promise 是一个 异步编程解决方案，提供了一种 链式调用的方法，以一种更为扁平的方式处理复杂异步编程场景。 在早期使用 异步回调函数时，经常容易出现 在异步回调中写异步回调的回调嵌套地域，导致代码拥冗难以阅读。 Promise是一个..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-01T08:21:49.000Z"}],["meta",{"property":"article:author","content":"李嘉明"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:modified_time","content":"2025-01-01T08:21:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"promise\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-01-01T08:21:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"李嘉明\\"}]}"]]},"headers":[],"readingTime":{"minutes":1.8,"words":541},"git":{"updatedTime":1735719709000},"autoDesc":true,"filePathRelative":"1.前端/6.JavaScript/基础篇/promise.md","categoryList":[{"id":"72e6d5","sort":1,"name":"前端"},{"id":"e69382","sort":6,"name":"JavaScript"},{"id":"0fb168","sort":10006,"name":"基础篇"}],"bulletin":false}');export{c as comp,l as data};

import{_ as t,c as a,a as i,o as r}from"./app-O3nTvmNM.js";const p={};function c(o,e){return r(),a("div",null,e[0]||(e[0]=[i('<div class="hint-container tip"><p class="hint-container-title">提问</p><ol><li>什么是文档预解析？</li><li>CSS 如何阻塞文档解析</li><li>渲染过程遇到 JS 文件怎么处理？</li><li><code>&lt;script&gt;</code> 的 <code>async</code> 和 <code>defer</code> 属性有什么作用？区别是什么？</li></ol></div><h2 id="文档预解析" tabindex="-1"><a class="header-anchor" href="#文档预解析"><span>文档预解析</span></a></h2><p>当执行 Javascript 脚本时，另一个线程会解析剩下的文档，并加载后面需要通过网络加载的资源。 这种方式可以使资源并行加载从而使整体速度更快。</p><p>预解析并不改变 DOM 树，它将这个工作留给主解析过程，自己只解析外部资源的引用，比如外部脚本、样式表和图片。</p><p>Webkit 和 Firefox 都做了这个优化。</p><h2 id="css-如何阻塞文档解析" tabindex="-1"><a class="header-anchor" href="#css-如何阻塞文档解析"><span>CSS 如何阻塞文档解析</span></a></h2><p>虽然样式表不改变 DOM 树，看起来没有必要停下文档的解析等待它们。 但是这里存在一个问题，Javascript 脚本执行时可能在文档的解析过程中请求样式信息， 如果样式还没有加载和解析，脚本将得到错误的值，显然会导致很多问题。</p><p>所以如果浏览器尚未完成 CSSOM 的下载和构建，但却在此时运行脚本，那么浏览器将延迟 Javascript 脚本执行和文档的解析, 直至其完成 CSSOM 的下载和构建。</p><p>在这种情况下，浏览器会先下载和构建 CSSOM，然后再执行，最后再继续文档的解析。</p><h2 id="渲染过程遇到-js-文件" tabindex="-1"><a class="header-anchor" href="#渲染过程遇到-js-文件"><span>渲染过程遇到 JS 文件</span></a></h2><p>Javascript 的加载、解析和执行会阻塞文档的解析。 在构建 DOM 时，HTML 解析器若遇到了 Javascript，那么会暂时停止文档的解析，将控制权移交给 Javascript 引擎， 等 Javascript 引擎运行完毕，浏览器在从中断的地方恢复继续解析文档。</p><p>所以为了首屏渲染的速度更快，不应该在首屏就加载 JS 文档，这也是建议将 script 标签放在 body 标签底部的原因。 但在现在，因为 script 标签有了 async 和 defer 属性，也不一定需要放在 body 标签底部了。</p><h2 id="script-的-async-和-defer-属性" tabindex="-1"><a class="header-anchor" href="#script-的-async-和-defer-属性"><span><code>&lt;script&gt;</code> 的 <code>async</code> 和 <code>defer</code> 属性</span></a></h2><ul><li><p><code>async</code> 属性 表示 异步执行引入的 javascript 脚本。</p><p>当前 javascript 加载时不会阻塞 HTML 文档的解析，加载完成后立即执行脚本。 即加载过程不阻塞 HTML 文档解析，但是加载完成开始执行仍然会阻塞 HTML 文档解析。 多个脚本的执行顺序无法保证。</p></li><li><p><code>defer</code> 属性 表示 延迟执行引入的 javascript 脚本。</p><p>当前 javascript 加载时不会阻塞 HTML 文档的解析，这两个过程是并行的。 当整个 HTML 解析完毕后在执行脚本文件。 并在 DOMContentLoaded 事件触发之前完成执行脚本文件，多个脚本按顺序执行。</p></li></ul>',14)]))}const s=t(p,[["render",c],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/interview-question/5z5tyxb9/","title":"浏览器解析过程","lang":"zh-CN","frontmatter":{"title":"浏览器解析过程","createTime":"2022/04/14 04:22:21","author":"李嘉明","permalink":"/interview-question/5z5tyxb9/","description":"提问 什么是文档预解析？ CSS 如何阻塞文档解析 渲染过程遇到 JS 文件怎么处理？ <script> 的 async 和 defer 属性有什么作用？区别是什么？ 文档预解析 当执行 Javascript 脚本时，另一个线程会解析剩下的文档，并加载后面需要通过网络加载的资源。 这种方式可以使资源并行加载从而使整体速度更快。 预解析并不改变 DOM ...","head":[["meta",{"property":"og:url","content":"http://garmin21.github.io/jm-blog/interview-question/5z5tyxb9/"}],["meta",{"property":"og:site_name","content":"Garming"}],["meta",{"property":"og:title","content":"浏览器解析过程"}],["meta",{"property":"og:description","content":"提问 什么是文档预解析？ CSS 如何阻塞文档解析 渲染过程遇到 JS 文件怎么处理？ <script> 的 async 和 defer 属性有什么作用？区别是什么？ 文档预解析 当执行 Javascript 脚本时，另一个线程会解析剩下的文档，并加载后面需要通过网络加载的资源。 这种方式可以使资源并行加载从而使整体速度更快。 预解析并不改变 DOM ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-12T11:44:38.000Z"}],["meta",{"property":"article:author","content":"李嘉明"}],["meta",{"property":"article:modified_time","content":"2024-12-12T11:44:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"浏览器解析过程\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-12T11:44:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"李嘉明\\"}]}"]]},"headers":[],"readingTime":{"minutes":2.41,"words":722},"git":{"updatedTime":1734003878000},"autoDesc":true,"filePathRelative":"notes/面试题/浏览器/浏览器解析过程.md","bulletin":false}');export{s as comp,d as data};

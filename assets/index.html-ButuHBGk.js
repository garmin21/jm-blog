import{_ as i,c as a,a as e,o as n}from"./app-D45c9q1v.js";const t={};function l(h,s){return n(),a("div",null,s[0]||(s[0]=[e(`<h2 id="元素和节点的关系" tabindex="-1"><a class="header-anchor" href="#元素和节点的关系"><span>元素和节点的关系？</span></a></h2><p><strong>文档中每一部分都是节点</strong>， 元素继承自节点， 比如 元素继承自元素节点，属性继承自属性节点。</p><h2 id="节点的分类" tabindex="-1"><a class="header-anchor" href="#节点的分类"><span>节点的分类</span></a></h2><ul><li>document 根节点</li><li>elementNode 元素节点</li><li>attributeNode 属性节点</li><li>textNode 文本节点</li><li>commentNode 注释节点</li></ul><h2 id="节点属性" tabindex="-1"><a class="header-anchor" href="#节点属性"><span>节点属性</span></a></h2><blockquote><p>根元素【html】的父节点是 document ,父元素是 null</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Node</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">nodeName</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">   // 节点名     元素节点通过nodeName可以获取标签名</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Node</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">nodeValue</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 节点值</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Node</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">nodeType</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">   // 节点类型  数字； document（9） element(1)  attribute(2)  text(3)   comment(8)</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Node</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">parentNode</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 父节点</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Node</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">childNode</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     // 所有子节点的集合</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Node</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">firstChild</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 第一个子节点</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Node</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">lastChild</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     // 最后一个子节点</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Node</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">previousSibling</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">   // 上一个兄弟节点</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Node</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">nextSibling</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">       // 下一个兄弟节点</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="节点方法" tabindex="-1"><a class="header-anchor" href="#节点方法"><span>节点方法</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Node</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">hasChildNodes</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 方法如果节点拥有子节点，则返回布尔 true，否则返回 false。</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Node</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">scrollIntoView</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 方法让当前的元素滚动到浏览器窗口的可视区域内，类似于window.scrollTo()方法</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">document</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">createElement</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">tagName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 创建元素节点</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">parentElement</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">appendChild</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">node</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  //追加子节点</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">parentElement</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">insertBefore</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">newNode</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> oldNode</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  //指定位置插入节点,并且是在指定节点的前面插入</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">parentElement</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">removeChild</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">node</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //删除子节点</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Node</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">remove</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 自杀，有一定兼容性问题</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">parentElement</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">replaceChild</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">newNode</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> oldNode</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">   //替换子节点, 会把旧的节点删掉换成新的节点</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">element</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">cloneNode</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 克隆节点	true 深度克隆，元素自己和后代元素都会克隆  | false (默认)  只克隆元素自己，不克隆后代元素</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="documentfragment-文档片段" tabindex="-1"><a class="header-anchor" href="#documentfragment-文档片段"><span>documentFragment / 文档片段</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 也是一类节点， nodeType是11， 不是元素。相当于一个一次性塑料袋</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 创建一个新的空白的文档片段对象</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> df</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> document</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">createDocumentFragment</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 可以给df对象添加子节点，df节点也可以作为其他元素的子节点</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// df对象不会出先在dom树中</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 应用场景：</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 	如果连续给一个元素添加多个子元素，可以先把子元素添加到df对象中，最后把df对象添加到父元素中！ 减少浏览器渲染次数。</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11)]))}const k=i(t,[["render",l],["__file","index.html.vue"]]),d=JSON.parse(`{"path":"/article/glu43qny/","title":"Node 节点","lang":"zh-CN","frontmatter":{"title":"Node 节点","author":"李嘉明","createTime":"2024/05/26 11:14:42","permalink":"/article/glu43qny/","tags":["DOM"],"head":[["script",{"type":"text/javascript"},"window._hmt = window._hmt || []"],["script",{"src":"https://hm.baidu.com/hm.js?49ebcb8d1abfcde890ef6f320a101db7","async":true}],["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem('vuepress-theme-appearance') || 'auto';const sm = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;if (um === 'dark' || (um !== 'light' && sm)) {document.documentElement.classList.add('dark');}})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle('mac', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"],["meta",{"property":"og:url","content":"http://garmin21.github.io/article/glu43qny/"}],["meta",{"property":"og:site_name","content":"Garming"}],["meta",{"property":"og:title","content":"Node 节点"}],["meta",{"property":"og:description","content":"元素和节点的关系？ 文档中每一部分都是节点， 元素继承自节点， 比如 元素继承自元素节点，属性继承自属性节点。 节点的分类 document 根节点 elementNode 元素节点 attributeNode 属性节点 textNode 文本节点 commentNode 注释节点 节点属性 根元素【html】的父节点是 document ,父元素是 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-12T11:44:38.000Z"}],["meta",{"property":"article:author","content":"李嘉明"}],["meta",{"property":"article:tag","content":"DOM"}],["meta",{"property":"article:modified_time","content":"2024-12-12T11:44:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Node 节点\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-12T11:44:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"李嘉明\\"}]}"]],"description":"元素和节点的关系？ 文档中每一部分都是节点， 元素继承自节点， 比如 元素继承自元素节点，属性继承自属性节点。 节点的分类 document 根节点 elementNode 元素节点 attributeNode 属性节点 textNode 文本节点 commentNode 注释节点 节点属性 根元素【html】的父节点是 document ,父元素是 ..."},"headers":[{"level":2,"title":"元素和节点的关系？","slug":"元素和节点的关系","link":"#元素和节点的关系","children":[]},{"level":2,"title":"节点的分类","slug":"节点的分类","link":"#节点的分类","children":[]},{"level":2,"title":"节点属性","slug":"节点属性","link":"#节点属性","children":[]},{"level":2,"title":"节点方法","slug":"节点方法","link":"#节点方法","children":[{"level":3,"title":"documentFragment / 文档片段","slug":"documentfragment-文档片段","link":"#documentfragment-文档片段","children":[]}]}],"isBlogPost":true,"readingTime":{"minutes":1.8,"words":539},"git":{"updatedTime":1734003878000},"autoDesc":true,"filePathRelative":"1.前端/16.DOM/node.md","categoryList":[{"type":1,"name":"前端"},{"type":16,"name":"DOM"}]}`);export{k as comp,d as data};

import{_ as e,c as a,a as i,o as r}from"./app-Bt2u7VYm.js";const p={};function l(o,t){return r(),a("div",null,t[0]||(t[0]=[i('<div class="hint-container tip"><p class="hint-container-title">提问</p><ol><li>什么是执行上下文</li><li>什么是执行栈</li></ol></div><h2 id="执行上下文" tabindex="-1"><a class="header-anchor" href="#执行上下文"><span>执行上下文</span></a></h2><p>执行上下文就是当前 <code>JavaScript</code> 代码被解析和执行时所在环境的抽象概念， <code>JavaScript</code> 中运行任何的代码都是在执行上下文中运行。</p><h3 id="类型" tabindex="-1"><a class="header-anchor" href="#类型"><span>类型</span></a></h3><ul><li><p>全局执行上下文</p><p>最基础的执行上下文，不在任何函数中的代码都位于全局执行上下中。 全局执行上下文有两个特性：1. 创建一个全局对象，如 window；2. 将 this 指向这个全局对象。 一个程序只能有一个全局上下文。</p></li><li><p>函数执行上下文</p><p>每次调用函数时，都会为该函数创建一个新的执行上下文。 每个函数都拥有自己的执行上下文，但只有被调用时才会被创建。</p></li><li><p>eval 函数执行上下文</p><p>运行在 eval 函数里中的代码有自己的执行上下文</p></li></ul><h3 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期"><span>生命周期</span></a></h3><ul><li><p>创建阶段</p><ul><li>创建变量对象</li><li>创建作用域链</li><li>确定 this 指向</li></ul></li><li><p>执行阶段</p></li><li><p>回收阶段</p></li></ul><h2 id="执行栈" tabindex="-1"><a class="header-anchor" href="#执行栈"><span>执行栈</span></a></h2><p>执行栈指 执行上下文栈（Execute Context Stack）。</p><p>执行栈 是一个存储函数调用的栈结构，遵循 先进后出 的规则。</p><ul><li>javascript 执行在单线程中，所有代码都是排队执行</li><li>执行全局代码时，创建全局执行上下文并压入执行栈的顶部</li><li>每当进入一个函数的执行就创建一个函数执行上下文，并压入执行栈的顶部，当前函数执行完后，当前函数的执行上下文出栈，等待垃圾回收</li><li>浏览器的 JS 引擎总是访问执行栈顶部的执行上下文</li><li>全局执行上下文总是只有一个，它在浏览器关闭时出栈。</li></ul>',11)]))}const c=e(p,[["render",l]]),s=JSON.parse('{"path":"/article/7xxy6of5/","title":"执行上下文和执行栈","lang":"zh-CN","frontmatter":{"title":"执行上下文和执行栈","createTime":"2022/04/22 09:40:24","author":"李嘉明","tags":["javascript"],"permalink":"/article/7xxy6of5/","description":"提问 什么是执行上下文 什么是执行栈 执行上下文 执行上下文就是当前 JavaScript 代码被解析和执行时所在环境的抽象概念， JavaScript 中运行任何的代码都是在执行上下文中运行。 类型 全局执行上下文 最基础的执行上下文，不在任何函数中的代码都位于全局执行上下中。 全局执行上下文有两个特性：1. 创建一个全局对象，如 window；2....","head":[["meta",{"property":"og:url","content":"http://garmin21.github.io/jm-blog/article/7xxy6of5/"}],["meta",{"property":"og:site_name","content":"Garming"}],["meta",{"property":"og:title","content":"执行上下文和执行栈"}],["meta",{"property":"og:description","content":"提问 什么是执行上下文 什么是执行栈 执行上下文 执行上下文就是当前 JavaScript 代码被解析和执行时所在环境的抽象概念， JavaScript 中运行任何的代码都是在执行上下文中运行。 类型 全局执行上下文 最基础的执行上下文，不在任何函数中的代码都位于全局执行上下中。 全局执行上下文有两个特性：1. 创建一个全局对象，如 window；2...."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-01T08:21:49.000Z"}],["meta",{"property":"article:author","content":"李嘉明"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:modified_time","content":"2025-01-01T08:21:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"执行上下文和执行栈\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-01-01T08:21:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"李嘉明\\"}]}"]]},"headers":[],"readingTime":{"minutes":1.62,"words":487},"git":{"updatedTime":1735719709000},"autoDesc":true,"filePathRelative":"1.前端/6.JavaScript/基础篇/执行上下文和执行栈.md","categoryList":[{"id":"72e6d5","sort":1,"name":"前端"},{"id":"e69382","sort":6,"name":"JavaScript"},{"id":"0fb168","sort":10006,"name":"基础篇"}],"bulletin":false}');export{c as comp,s as data};

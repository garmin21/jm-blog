import{_ as i,c as a,a as n,o as e}from"./app-CFASprp9.js";const t={};function l(p,s){return e(),a("div",null,s[0]||(s[0]=[n(`<p>defineAsyncComponent 是 Vue 3 提供的一个用于<strong>异步加载组件</strong>的功能，它允许我们在需要时才去加载某个组件，而不是一开始就把所有组件都加载到页面中。这样可以有效地<strong>减少首屏加载时间</strong>尤其是当项目中组件数量庞大时，异步加载组件可以极大提高应用的[性能]</p><h2 id="_1-由来" tabindex="-1"><a class="header-anchor" href="#_1-由来"><span>1. 由来</span></a></h2><p>在 <a href="https://so.csdn.net/so/search?q=Vue%202&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener noreferrer">Vue 2</a> 中，我们使用 Vue.component 来异步加载组件，但这种方式不够灵活，而且代码风格比较混乱。因此在 Vue 3 中，引入了 defineAsyncComponent，提供了一种更清晰、更模块化的异步组件定义方法。</p><h2 id="_2-为什么引入" tabindex="-1"><a class="header-anchor" href="#_2-为什么引入"><span>2. 为什么引入？</span></a></h2><p>1、减少首屏加载时间：在大型应用中，初始加载时如果同时加载所有的组件，可能会导致页面首屏加载过慢。异步组件可以按需加载，提升页面加载速度。</p><p>2、提升性能：当用户访问到某个特定页面或触发特定操作时再加载相关组件，避免一次性加载所有内容，节省带宽和资源。</p><p>3、提升用户体验：使用 defineAsyncComponent 可以配合加载中的 UI 组件，给用户一种流畅的交互体验。</p><h2 id="_3-基本使用" tabindex="-1"><a class="header-anchor" href="#_3-基本使用"><span>3. 基本使用</span></a></h2><p><a href="https://so.csdn.net/so/search?q=Vue%203&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener noreferrer">Vue 3</a> 中 defineAsyncComponent 是一个<a href="https://marketing.csdn.net/p/3127db09a98e0723b83b2914d9256174?pId=2782&amp;utm_source=glcblog&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener noreferrer">函数</a>，用于异步导入组件。它返回一个函数，当组件真正被使用时才去加载该组件。</p><p><strong>在模板中使用异步组件：</strong></p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">template</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;&lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">AsyncComponent</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> /&gt;&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">template</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  import</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> defineAsyncComponent</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">vue</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  export</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> default</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    components</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">      AsyncComponent</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> defineAsyncComponent</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> import</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">./Component.vue</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)),</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    },</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  };</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>import(&#39;./Component.vue&#39;) 是动态导入语法，返回一个 <strong>Promise</strong>，当组件加载成功时解析这个 Promise，组件才会被渲染。</p><p>其还支持更复杂的用法，比如配置加载中组件、错误组件和延迟时间等。</p><p><strong>带选项的用法：</strong></p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> AsyncComponent</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> defineAsyncComponent</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">({</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 工厂函数，返回一个 Promise</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  loader</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> import</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">./Component.vue</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 当异步组件正在加载时要显示的组件</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  loadingComponent</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> LoadingComponent</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 当加载失败时要显示的组件</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  errorComponent</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> ErrorComponent</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 延迟显示 loadingComponent，默认是 200 毫秒</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  delay</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 300</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 如果加载组件超时，将显示 errorComponent，默认值是 Infinity</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  timeout</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 3000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>- loader：这是一个工厂函数，返回一个 Promise。</p><p>- loadingComponent：当组件正在加载时，用来展示的占位组件。</p><p>- errorComponent：如果组件加载失败（例如网络问题或超时），展示的错误组件。</p><p>- delay：如果需要延迟展示 loading 组件，可以设置一个延迟时间（单位为毫秒）。默认延迟是 200 毫秒，避免闪烁问题。</p><p>- timeout：如果在指定时间内组件没有加载完毕，就会显示 errorComponent，这里可以设定超时时间。</p><p><strong>配合路由懒加载：</strong></p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> routes</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/about</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    component</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> defineAsyncComponent</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> import</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">./components/About.vue</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)),</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  },</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">];</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当用户访问 /about 路径时才会去加载 About.vue 组件。</p><h2 id="_4-隐藏点" tabindex="-1"><a class="header-anchor" href="#_4-隐藏点"><span>4. 隐藏点</span></a></h2><p>1、首次渲染时的延迟</p><p>默认情况下，异步组件的 loadingComponent 会有一个 200 毫秒的延迟，这个延迟是为了避免在组件加载非常快时，闪烁显示加载组件。如果不想要这个延迟，可以手动设置 delay: 0。</p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> AsyncComponent</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> defineAsyncComponent</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">({</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  loader</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> import</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">./Component.vue</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  loadingComponent</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> LoadingComponent</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  delay</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 取消默认延迟});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果不设置 delay，短时间内加载完成的异步组件不会展示 LoadingComponent，这可能会让我们觉得加载动画不一致。</p><p>2、组件缓存与重复加载</p><p>- defineAsyncComponent 默认<strong>不会缓存</strong>已经加载的组件。如果多次切换到同一个异步组件，Vue 会每次重新加载它。要避免这种情况，可以将组件手动缓存到本地或使用类似 Vue Router 的路由缓存。</p><p>- 如果在同一个页面内反复使用同一个异步组件，且该组件的加载过程比较耗时，最好将组件缓存，减少不必要的重复加载。</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">keep-alive</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">AsyncComponent</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> /&gt;&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">keep-alive</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>3、异步组件的并发加载</p><p>如果异步组件在多个地方被同时加载，Vue 不会自动合并这些请求，导致同一组件被多次加载。这种情况可能会引起性能问题，尤其是在网络较差时。</p><p>解决方法：可以手动控制组件的加载，通过 Promise 的 then 和 catch 来缓存加载状态，避免重复加载。</p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">let</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> AsyncComponentPromise</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> AsyncComponent</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> defineAsyncComponent</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">!</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">AsyncComponentPromise</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    AsyncComponentPromise</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> import</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">./Component.vue</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> AsyncComponentPromise</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4、异步<a href="https://marketing.csdn.net/p/3127db09a98e0723b83b2914d9256174?pId=2782&amp;utm_source=glcblog&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener noreferrer">错误处理</a>机制</p><p>defineAsyncComponent 提供了 onError 回调，这个回调可以捕获组件加载过程中发生的错误，比如网络问题、模块解析失败等。通过 onError 可以做一些自定义的错误处理，比如重试机制或展示特定的错误信息。</p><p>默认情况下异步组件失败时只是简单地显示 errorComponent，但可以通过 onError 实现更复杂的错误恢复或重试机制。</p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> AsyncComponent</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> defineAsyncComponent</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">({</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  loader</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> import</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">./Component.vue</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  onError</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">error</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> retry</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> fail</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> attempts</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">attempts</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">      // 尝试重试</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">      retry</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> else</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">      // 如果超过了重试次数，失败</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">      fail</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  },</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-使用场景" tabindex="-1"><a class="header-anchor" href="#_5-使用场景"><span>5. 使用场景</span></a></h2><p>1、大型单页应用（SPA）：当应用包含大量组件时，通过按需加载优化性能。</p><p>2、动态加载某些不常用的页面或组件：如管理后台、图表页面等，用户并不总是访问这些页面，可以异步加载以节省初始加载资源。</p><p>3、配合路由懒加载：使用 Vue Router 时，通过路由懒加载，实现不同页面组件的异步加载。</p><h2 id="_6-注意事项" tabindex="-1"><a class="header-anchor" href="#_6-注意事项"><span>6. 注意事项</span></a></h2><p>1、组件路径问题：要确保 import(&#39;./Component.vue&#39;) 的路径是正确的，否则会抛出模块找不到的错误。</p><p>2、超时处理：如果网络较慢，加载超时会显示错误组件，可以根据实际情况调整 timeout。</p><p>3、SEO 问题：异步组件的懒加载可能会导致首屏渲染延迟，影响到搜索引擎优化（SEO）。因此对于需要 SEO 的页面，应该避免懒加载关键内容。</p><p>4、加载中状态处理：为了用户体验，通常要显示 loadingComponent，并避免加载中的页面闪烁。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结：</span></a></h2><p>defineAsyncComponent 是 Vue 3 为优化性能和用户体验而提供的一种强大工具，尤其适用于大项目中按需加载组件的需求。通过合理设置 loadingComponent、errorComponent 等选项，可以为用户提供更加流畅的体验，同时减轻首屏加载压力。</p>`,51)]))}const k=i(t,[["render",l],["__file","index.html.vue"]]),r=JSON.parse('{"path":"/learn-vue3/clr9tdki/","title":"defineAsyncComponent","lang":"zh-CN","frontmatter":{"title":"defineAsyncComponent","author":"李嘉明","createTime":"2024/09/08 18:56:27","permalink":"/learn-vue3/clr9tdki/","description":"defineAsyncComponent 是 Vue 3 提供的一个用于异步加载组件的功能，它允许我们在需要时才去加载某个组件，而不是一开始就把所有组件都加载到页面中。这样可以有效地减少首屏加载时间尤其是当项目中组件数量庞大时，异步加载组件可以极大提高应用的[性能] 1. 由来 在 Vue 2 中，我们使用 Vue.component 来异步加载组件，...","head":[["meta",{"property":"og:url","content":"http://garmin21.github.io/jm-blog/learn-vue3/clr9tdki/"}],["meta",{"property":"og:site_name","content":"Garming"}],["meta",{"property":"og:title","content":"defineAsyncComponent"}],["meta",{"property":"og:description","content":"defineAsyncComponent 是 Vue 3 提供的一个用于异步加载组件的功能，它允许我们在需要时才去加载某个组件，而不是一开始就把所有组件都加载到页面中。这样可以有效地减少首屏加载时间尤其是当项目中组件数量庞大时，异步加载组件可以极大提高应用的[性能] 1. 由来 在 Vue 2 中，我们使用 Vue.component 来异步加载组件，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-16T01:26:17.000Z"}],["meta",{"property":"article:author","content":"李嘉明"}],["meta",{"property":"article:modified_time","content":"2024-12-16T01:26:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"defineAsyncComponent\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-16T01:26:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"李嘉明\\"}]}"]]},"headers":[],"readingTime":{"minutes":5.54,"words":1661},"git":{"updatedTime":1734312377000},"autoDesc":true,"filePathRelative":"notes/vue3学习简记/基础入门/defineAsyncComponent.md","bulletin":false}');export{k as comp,r as data};

import{_ as e,c as a,a as i,o}from"./app-D45c9q1v.js";const r={};function n(c,t){return o(),a("div",null,t[0]||(t[0]=[i('<div class="hint-container tip"><p class="hint-container-title">提问</p><ol><li>什么是事件？</li><li>标准事件模型</li><li>什么是事件委托？</li></ol></div><h2 id="事件" tabindex="-1"><a class="header-anchor" href="#事件"><span>事件</span></a></h2><p>事件是 在浏览器窗口中被触发并且通常被绑定在窗口内部的特定部分。 可能是一个元素、一系列元素、被加载到这个窗口的 HTML 代码，或者整个浏览器窗口。</p><p>比如：</p><ul><li>用户对页面进行的操作，如 点击鼠标或悬停光标、按下键盘某个按键、调整浏览器的大小</li><li>网页停止加载</li><li>提交表达</li><li>发生错误</li></ul><h2 id="标准事件模型" tabindex="-1"><a class="header-anchor" href="#标准事件模型"><span>标准事件模型</span></a></h2><p>DOM 标准事件模型指的是 DOM2 事件模型。</p><p>在标准事件模型中，一次事件的发生有三个阶段：</p><ol><li>事件捕获阶段。事件从 window 对象自上而下向目标节点传播的阶段；</li><li>目标阶段。 真正的目标节点正在处理事件的阶段；</li><li>冒泡阶段：事件从目标节点自下而上向 window 对象传播的阶段。</li></ol><h2 id="事件委托" tabindex="-1"><a class="header-anchor" href="#事件委托"><span>事件委托</span></a></h2><p>事件委托本质上是利用浏览器事件冒泡的机制。因为事件在冒泡过程中会上传到父节点， 并且父节点可以通过事件对象获取到目标节点，因此可以吧子节点的监听函数定义在父节点上， 由父节点的监听函数统一处理多个子元素的事件，这种方式称为 事件代理 或者 事件委托。</p><p>使用事件委托，就可以不必要为每一个子元素都绑定一个监听事件，这样减少了内存上的消耗。 并且使用事件委托，可以实现事件的动态绑定，比如新增了一个子节点，就不需要单独地为它添加一个监听事件， 节点发生的事件会交给父元素中的监听函数来处理。</p>',12)]))}const p=e(r,[["render",n],["__file","index.html.vue"]]),s=JSON.parse(`{"path":"/article/bww4boap/","title":"事件","lang":"zh-CN","frontmatter":{"title":"事件","createTime":"2022/04/15 04:49:24","author":"李嘉明","tags":["javascript"],"permalink":"/article/bww4boap/","head":[["script",{"type":"text/javascript"},"window._hmt = window._hmt || []"],["script",{"src":"https://hm.baidu.com/hm.js?49ebcb8d1abfcde890ef6f320a101db7","async":true}],["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem('vuepress-theme-appearance') || 'auto';const sm = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;if (um === 'dark' || (um !== 'light' && sm)) {document.documentElement.classList.add('dark');}})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle('mac', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"],["meta",{"property":"og:url","content":"http://garmin21.github.io/article/bww4boap/"}],["meta",{"property":"og:site_name","content":"Garming"}],["meta",{"property":"og:title","content":"事件"}],["meta",{"property":"og:description","content":"提问 什么是事件？ 标准事件模型 什么是事件委托？ 事件 事件是 在浏览器窗口中被触发并且通常被绑定在窗口内部的特定部分。 可能是一个元素、一系列元素、被加载到这个窗口的 HTML 代码，或者整个浏览器窗口。 比如： 用户对页面进行的操作，如 点击鼠标或悬停光标、按下键盘某个按键、调整浏览器的大小 网页停止加载 提交表达 发生错误 标准事件模型 DOM..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-12T11:44:38.000Z"}],["meta",{"property":"article:author","content":"李嘉明"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:modified_time","content":"2024-12-12T11:44:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"事件\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-12T11:44:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"李嘉明\\"}]}"]],"description":"提问 什么是事件？ 标准事件模型 什么是事件委托？ 事件 事件是 在浏览器窗口中被触发并且通常被绑定在窗口内部的特定部分。 可能是一个元素、一系列元素、被加载到这个窗口的 HTML 代码，或者整个浏览器窗口。 比如： 用户对页面进行的操作，如 点击鼠标或悬停光标、按下键盘某个按键、调整浏览器的大小 网页停止加载 提交表达 发生错误 标准事件模型 DOM..."},"headers":[{"level":2,"title":"事件","slug":"事件","link":"#事件","children":[]},{"level":2,"title":"标准事件模型","slug":"标准事件模型","link":"#标准事件模型","children":[]},{"level":2,"title":"事件委托","slug":"事件委托","link":"#事件委托","children":[]}],"isBlogPost":true,"readingTime":{"minutes":1.65,"words":496},"git":{"updatedTime":1734003878000},"autoDesc":true,"filePathRelative":"1.前端/6.JavaScript/1.基础/事件.md","categoryList":[{"type":1,"name":"前端"},{"type":6,"name":"JavaScript"},{"type":1,"name":"基础"}]}`);export{p as comp,s as data};
